// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage/chart.proto

#include "storage/chart.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_storage_2fchart_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Action;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Color;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Point;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ActionType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Circle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Graphic;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Library;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Line;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Polygon;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Rectangle;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Row;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Spline;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Style;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Text;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto ::google::protobuf::internal::SCCInfo<7> scc_info_Shape;
}  // namespace protobuf_storage_2fchart_2eproto
namespace chart_proto {
class ColorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Color>
      _instance;
} _Color_default_instance_;
class StyleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Style>
      _instance;
} _Style_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Point>
      _instance;
} _Point_default_instance_;
class LineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Line>
      _instance;
} _Line_default_instance_;
class RectangleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Rectangle>
      _instance;
} _Rectangle_default_instance_;
class CircleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Circle>
      _instance;
} _Circle_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Polygon>
      _instance;
} _Polygon_default_instance_;
class SplineDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Spline>
      _instance;
} _Spline_default_instance_;
class TextDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Text>
      _instance;
} _Text_default_instance_;
class ShapeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Shape>
      _instance;
} _Shape_default_instance_;
class GraphicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Graphic>
      _instance;
} _Graphic_default_instance_;
class ActionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Action>
      _instance;
} _Action_default_instance_;
class RowDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Row>
      _instance;
} _Row_default_instance_;
class ActionTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ActionType>
      _instance;
} _ActionType_default_instance_;
class LibraryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Library>
      _instance;
} _Library_default_instance_;
class ChartDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Chart>
      _instance;
} _Chart_default_instance_;
class ChartFileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ChartFile>
      _instance;
} _ChartFile_default_instance_;
}  // namespace chart_proto
namespace protobuf_storage_2fchart_2eproto {
static void InitDefaultsColor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Color_default_instance_;
    new (ptr) ::chart_proto::Color();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Color::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Color =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColor}, {}};

static void InitDefaultsStyle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Style_default_instance_;
    new (ptr) ::chart_proto::Style();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Style::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Style =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStyle}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Color.base,}};

static void InitDefaultsPoint() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Point_default_instance_;
    new (ptr) ::chart_proto::Point();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Point::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Point =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPoint}, {}};

static void InitDefaultsLine() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Line_default_instance_;
    new (ptr) ::chart_proto::Line();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Line::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Line =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLine}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Point.base,}};

static void InitDefaultsRectangle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Rectangle_default_instance_;
    new (ptr) ::chart_proto::Rectangle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Rectangle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Rectangle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRectangle}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Point.base,}};

static void InitDefaultsCircle() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Circle_default_instance_;
    new (ptr) ::chart_proto::Circle();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Circle::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Circle =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCircle}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Point.base,}};

static void InitDefaultsPolygon() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Polygon_default_instance_;
    new (ptr) ::chart_proto::Polygon();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Polygon::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Polygon =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPolygon}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Point.base,}};

static void InitDefaultsSpline() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Spline_default_instance_;
    new (ptr) ::chart_proto::Spline();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Spline::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Spline =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSpline}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Point.base,}};

static void InitDefaultsText() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Text_default_instance_;
    new (ptr) ::chart_proto::Text();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Text::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Text =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsText}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Point.base,}};

static void InitDefaultsShape() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Shape_default_instance_;
    new (ptr) ::chart_proto::Shape();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Shape::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<7> scc_info_Shape =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 7, InitDefaultsShape}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Line.base,
      &protobuf_storage_2fchart_2eproto::scc_info_Rectangle.base,
      &protobuf_storage_2fchart_2eproto::scc_info_Circle.base,
      &protobuf_storage_2fchart_2eproto::scc_info_Polygon.base,
      &protobuf_storage_2fchart_2eproto::scc_info_Spline.base,
      &protobuf_storage_2fchart_2eproto::scc_info_Text.base,
      &protobuf_storage_2fchart_2eproto::scc_info_Style.base,}};

static void InitDefaultsGraphic() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Graphic_default_instance_;
    new (ptr) ::chart_proto::Graphic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Graphic::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Graphic =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGraphic}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Shape.base,}};

static void InitDefaultsAction() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Action_default_instance_;
    new (ptr) ::chart_proto::Action();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Action::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Action =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAction}, {}};

static void InitDefaultsRow() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Row_default_instance_;
    new (ptr) ::chart_proto::Row();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Row::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Row =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRow}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Action.base,}};

static void InitDefaultsActionType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_ActionType_default_instance_;
    new (ptr) ::chart_proto::ActionType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::ActionType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ActionType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsActionType}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Graphic.base,}};

static void InitDefaultsLibrary() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Library_default_instance_;
    new (ptr) ::chart_proto::Library();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Library::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Library =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsLibrary}, {
      &protobuf_storage_2fchart_2eproto::scc_info_ActionType.base,}};

static void InitDefaultsChart() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_Chart_default_instance_;
    new (ptr) ::chart_proto::Chart();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::Chart::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Chart =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsChart}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Row.base,
      &protobuf_storage_2fchart_2eproto::scc_info_Library.base,}};

static void InitDefaultsChartFile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::chart_proto::_ChartFile_default_instance_;
    new (ptr) ::chart_proto::ChartFile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::chart_proto::ChartFile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ChartFile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsChartFile}, {
      &protobuf_storage_2fchart_2eproto::scc_info_Library.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Color.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Style.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Point.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Line.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Rectangle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Circle.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Polygon.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Spline.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Text.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Shape.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Graphic.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Action.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Row.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ActionType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Library.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Chart.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ChartFile.base);
}

::google::protobuf::Metadata file_level_metadata[17];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Color, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Color, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Color, red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Color, green_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Color, blue_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Style, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Style, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Style, fill_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Style, stroke_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Style, stroke_width_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Point, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Point, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Point, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Line, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Line, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Line, point1_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Line, point2_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Rectangle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Rectangle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Rectangle, top_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Rectangle, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Rectangle, height_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Circle, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Circle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Circle, center_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Circle, radius_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Polygon, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Polygon, point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Spline, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Spline, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Spline, point_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Text, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Text, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Text, point_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Text, text_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, line_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, rectangle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, circle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, polygon_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, spline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, text_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, style_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, text_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Shape, text_length_),
  0,
  1,
  2,
  3,
  6,
  5,
  4,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Graphic, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Graphic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Graphic, shape_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Graphic, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Graphic, height_),
  ~0u,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Action, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Action, action_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Action, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Action, repetitions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Action, text_offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Action, text_length_),
  0,
  1,
  4,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Row, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Row, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Row, action_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ActionType, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ActionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ActionType, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ActionType, width_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ActionType, graphic_),
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Library, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Library, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Library, action_type_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Chart, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Chart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Chart, row_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::Chart, library_),
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ChartFile, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ChartFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ChartFile, library_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::chart_proto::ChartFile, text_),
  1,
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::chart_proto::Color)},
  { 11, 19, sizeof(::chart_proto::Style)},
  { 22, 29, sizeof(::chart_proto::Point)},
  { 31, 38, sizeof(::chart_proto::Line)},
  { 40, 48, sizeof(::chart_proto::Rectangle)},
  { 51, 58, sizeof(::chart_proto::Circle)},
  { 60, 66, sizeof(::chart_proto::Polygon)},
  { 67, 73, sizeof(::chart_proto::Spline)},
  { 74, 81, sizeof(::chart_proto::Text)},
  { 83, 97, sizeof(::chart_proto::Shape)},
  { 106, 114, sizeof(::chart_proto::Graphic)},
  { 117, 127, sizeof(::chart_proto::Action)},
  { 132, 138, sizeof(::chart_proto::Row)},
  { 139, 147, sizeof(::chart_proto::ActionType)},
  { 150, 156, sizeof(::chart_proto::Library)},
  { 157, 164, sizeof(::chart_proto::Chart)},
  { 166, 173, sizeof(::chart_proto::ChartFile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Color_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Style_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Point_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Line_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Rectangle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Circle_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Polygon_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Spline_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Text_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Shape_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Graphic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Action_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Row_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_ActionType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Library_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_Chart_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::chart_proto::_ChartFile_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "storage/chart.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 17);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\023storage/chart.proto\022\013chart_proto\"1\n\005Co"
      "lor\022\013\n\003red\030\001 \002(\005\022\r\n\005green\030\002 \002(\005\022\014\n\004blue\030"
      "\003 \002(\005\"f\n\005Style\022 \n\004fill\030\001 \001(\0132\022.chart_pro"
      "to.Color\022\"\n\006stroke\030\002 \001(\0132\022.chart_proto.C"
      "olor\022\027\n\014stroke_width\030\003 \001(\005:\0011\"\035\n\005Point\022\t"
      "\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\"N\n\004Line\022\"\n\006point1\030\001"
      " \002(\0132\022.chart_proto.Point\022\"\n\006point2\030\002 \002(\013"
      "2\022.chart_proto.Point\"P\n\tRectangle\022$\n\010top"
      "_left\030\001 \002(\0132\022.chart_proto.Point\022\r\n\005width"
      "\030\002 \002(\002\022\016\n\006height\030\003 \002(\002\"<\n\006Circle\022\"\n\006cent"
      "er\030\001 \002(\0132\022.chart_proto.Point\022\016\n\006radius\030\002"
      " \002(\002\",\n\007Polygon\022!\n\005point\030\001 \003(\0132\022.chart_p"
      "roto.Point\"+\n\006Spline\022!\n\005point\030\001 \003(\0132\022.ch"
      "art_proto.Point\"7\n\004Text\022!\n\005point\030\001 \001(\0132\022"
      ".chart_proto.Point\022\014\n\004text\030\002 \002(\t\"\262\002\n\005Sha"
      "pe\022\037\n\004line\030\001 \001(\0132\021.chart_proto.Line\022)\n\tr"
      "ectangle\030\002 \001(\0132\026.chart_proto.Rectangle\022#"
      "\n\006circle\030\003 \001(\0132\023.chart_proto.Circle\022%\n\007p"
      "olygon\030\004 \001(\0132\024.chart_proto.Polygon\022#\n\006sp"
      "line\030\t \001(\0132\023.chart_proto.Spline\022\037\n\004text\030"
      "\010 \001(\0132\021.chart_proto.Text\022!\n\005style\030\005 \001(\0132"
      "\022.chart_proto.Style\022\023\n\013text_offset\030\006 \001(\005"
      "\022\023\n\013text_length\030\007 \001(\005\"K\n\007Graphic\022!\n\005shap"
      "e\030\001 \003(\0132\022.chart_proto.Shape\022\r\n\005width\030\002 \001"
      "(\002\022\016\n\006height\030\003 \001(\002\"i\n\006Action\022\016\n\006action\030\001"
      " \002(\t\022\r\n\005width\030\003 \002(\005\022\026\n\013repetitions\030\002 \001(\005"
      ":\0011\022\023\n\013text_offset\030\004 \001(\005\022\023\n\013text_length\030"
      "\005 \001(\005\"*\n\003Row\022#\n\006action\030\001 \003(\0132\023.chart_pro"
      "to.Action\"S\n\nActionType\022\014\n\004name\030\001 \002(\t\022\020\n"
      "\005width\030\002 \001(\005:\0011\022%\n\007graphic\030\004 \001(\0132\024.chart"
      "_proto.Graphic\"7\n\007Library\022,\n\013action_type"
      "\030\001 \003(\0132\027.chart_proto.ActionType\"M\n\005Chart"
      "\022\035\n\003row\030\001 \003(\0132\020.chart_proto.Row\022%\n\007libra"
      "ry\030\002 \001(\0132\024.chart_proto.Library\"@\n\tChartF"
      "ile\022%\n\007library\030\002 \001(\0132\024.chart_proto.Libra"
      "ry\022\014\n\004text\030\004 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1416);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "storage/chart.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_storage_2fchart_2eproto
namespace chart_proto {

// ===================================================================

void Color::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Color::kRedFieldNumber;
const int Color::kGreenFieldNumber;
const int Color::kBlueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Color::Color()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Color.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Color)
}
Color::Color(const Color& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&red_, &from.red_,
    static_cast<size_t>(reinterpret_cast<char*>(&blue_) -
    reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  // @@protoc_insertion_point(copy_constructor:chart_proto.Color)
}

void Color::SharedCtor() {
  ::memset(&red_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&blue_) -
      reinterpret_cast<char*>(&red_)) + sizeof(blue_));
}

Color::~Color() {
  // @@protoc_insertion_point(destructor:chart_proto.Color)
  SharedDtor();
}

void Color::SharedDtor() {
}

void Color::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Color::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Color& Color::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Color.base);
  return *internal_default_instance();
}


void Color::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&red_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&blue_) -
        reinterpret_cast<char*>(&red_)) + sizeof(blue_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Color::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Color)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 red = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_red();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &red_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 green = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_green();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &green_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 blue = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_blue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blue_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Color)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Color)
  return false;
#undef DO_
}

void Color::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 red = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->red(), output);
  }

  // required int32 green = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->green(), output);
  }

  // required int32 blue = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->blue(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Color)
}

::google::protobuf::uint8* Color::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Color)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 red = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->red(), target);
  }

  // required int32 green = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->green(), target);
  }

  // required int32 blue = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->blue(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Color)
  return target;
}

size_t Color::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chart_proto.Color)
  size_t total_size = 0;

  if (has_red()) {
    // required int32 red = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->red());
  }

  if (has_green()) {
    // required int32 green = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->green());
  }

  if (has_blue()) {
    // required int32 blue = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blue());
  }

  return total_size;
}
size_t Color::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Color)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 red = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->red());

    // required int32 green = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->green());

    // required int32 blue = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->blue());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Color::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Color)
  GOOGLE_DCHECK_NE(&from, this);
  const Color* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Color>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Color)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Color)
    MergeFrom(*source);
  }
}

void Color::MergeFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Color)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      red_ = from.red_;
    }
    if (cached_has_bits & 0x00000002u) {
      green_ = from.green_;
    }
    if (cached_has_bits & 0x00000004u) {
      blue_ = from.blue_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Color::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Color::CopyFrom(const Color& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Color)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Color::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void Color::Swap(Color* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Color::InternalSwap(Color* other) {
  using std::swap;
  swap(red_, other->red_);
  swap(green_, other->green_);
  swap(blue_, other->blue_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Color::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Style::InitAsDefaultInstance() {
  ::chart_proto::_Style_default_instance_._instance.get_mutable()->fill_ = const_cast< ::chart_proto::Color*>(
      ::chart_proto::Color::internal_default_instance());
  ::chart_proto::_Style_default_instance_._instance.get_mutable()->stroke_ = const_cast< ::chart_proto::Color*>(
      ::chart_proto::Color::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Style::kFillFieldNumber;
const int Style::kStrokeFieldNumber;
const int Style::kStrokeWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Style::Style()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Style.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Style)
}
Style::Style(const Style& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_fill()) {
    fill_ = new ::chart_proto::Color(*from.fill_);
  } else {
    fill_ = NULL;
  }
  if (from.has_stroke()) {
    stroke_ = new ::chart_proto::Color(*from.stroke_);
  } else {
    stroke_ = NULL;
  }
  stroke_width_ = from.stroke_width_;
  // @@protoc_insertion_point(copy_constructor:chart_proto.Style)
}

void Style::SharedCtor() {
  ::memset(&fill_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stroke_) -
      reinterpret_cast<char*>(&fill_)) + sizeof(stroke_));
  stroke_width_ = 1;
}

Style::~Style() {
  // @@protoc_insertion_point(destructor:chart_proto.Style)
  SharedDtor();
}

void Style::SharedDtor() {
  if (this != internal_default_instance()) delete fill_;
  if (this != internal_default_instance()) delete stroke_;
}

void Style::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Style::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Style& Style::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Style.base);
  return *internal_default_instance();
}


void Style::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(fill_ != NULL);
      fill_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(stroke_ != NULL);
      stroke_->Clear();
    }
    stroke_width_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Style::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Style)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chart_proto.Color fill = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fill()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Color stroke = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_stroke()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 stroke_width = 3 [default = 1];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_stroke_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stroke_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Style)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Style)
  return false;
#undef DO_
}

void Style::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Color fill = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_fill(), output);
  }

  // optional .chart_proto.Color stroke = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_stroke(), output);
  }

  // optional int32 stroke_width = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->stroke_width(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Style)
}

::google::protobuf::uint8* Style::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Style)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Color fill = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_fill(), deterministic, target);
  }

  // optional .chart_proto.Color stroke = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_stroke(), deterministic, target);
  }

  // optional int32 stroke_width = 3 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->stroke_width(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Style)
  return target;
}

size_t Style::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Style)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional .chart_proto.Color fill = 1;
    if (has_fill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *fill_);
    }

    // optional .chart_proto.Color stroke = 2;
    if (has_stroke()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *stroke_);
    }

    // optional int32 stroke_width = 3 [default = 1];
    if (has_stroke_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stroke_width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Style::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Style)
  GOOGLE_DCHECK_NE(&from, this);
  const Style* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Style>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Style)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Style)
    MergeFrom(*source);
  }
}

void Style::MergeFrom(const Style& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Style)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_fill()->::chart_proto::Color::MergeFrom(from.fill());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stroke()->::chart_proto::Color::MergeFrom(from.stroke());
    }
    if (cached_has_bits & 0x00000004u) {
      stroke_width_ = from.stroke_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Style::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Style::CopyFrom(const Style& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Style)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Style::IsInitialized() const {
  if (has_fill()) {
    if (!this->fill_->IsInitialized()) return false;
  }
  if (has_stroke()) {
    if (!this->stroke_->IsInitialized()) return false;
  }
  return true;
}

void Style::Swap(Style* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Style::InternalSwap(Style* other) {
  using std::swap;
  swap(fill_, other->fill_);
  swap(stroke_, other->stroke_);
  swap(stroke_width_, other->stroke_width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Style::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Point.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:chart_proto.Point)
}

void Point::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:chart_proto.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Point& Point::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Point.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Point)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Point)
  return target;
}

size_t Point::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chart_proto.Point)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Point)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Line::InitAsDefaultInstance() {
  ::chart_proto::_Line_default_instance_._instance.get_mutable()->point1_ = const_cast< ::chart_proto::Point*>(
      ::chart_proto::Point::internal_default_instance());
  ::chart_proto::_Line_default_instance_._instance.get_mutable()->point2_ = const_cast< ::chart_proto::Point*>(
      ::chart_proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Line::kPoint1FieldNumber;
const int Line::kPoint2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Line::Line()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Line.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Line)
}
Line::Line(const Line& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_point1()) {
    point1_ = new ::chart_proto::Point(*from.point1_);
  } else {
    point1_ = NULL;
  }
  if (from.has_point2()) {
    point2_ = new ::chart_proto::Point(*from.point2_);
  } else {
    point2_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chart_proto.Line)
}

void Line::SharedCtor() {
  ::memset(&point1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point2_) -
      reinterpret_cast<char*>(&point1_)) + sizeof(point2_));
}

Line::~Line() {
  // @@protoc_insertion_point(destructor:chart_proto.Line)
  SharedDtor();
}

void Line::SharedDtor() {
  if (this != internal_default_instance()) delete point1_;
  if (this != internal_default_instance()) delete point2_;
}

void Line::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Line::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Line& Line::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Line.base);
  return *internal_default_instance();
}


void Line::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(point1_ != NULL);
      point1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(point2_ != NULL);
      point2_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Line)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .chart_proto.Point point1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .chart_proto.Point point2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Line)
  return false;
#undef DO_
}

void Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chart_proto.Point point1 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_point1(), output);
  }

  // required .chart_proto.Point point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_point2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Line)
}

::google::protobuf::uint8* Line::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chart_proto.Point point1 = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_point1(), deterministic, target);
  }

  // required .chart_proto.Point point2 = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_point2(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Line)
  return target;
}

size_t Line::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chart_proto.Line)
  size_t total_size = 0;

  if (has_point1()) {
    // required .chart_proto.Point point1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point1_);
  }

  if (has_point2()) {
    // required .chart_proto.Point point2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point2_);
  }

  return total_size;
}
size_t Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Line)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .chart_proto.Point point1 = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point1_);

    // required .chart_proto.Point point2 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point2_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Line::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Line)
  GOOGLE_DCHECK_NE(&from, this);
  const Line* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Line>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Line)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Line)
    MergeFrom(*source);
  }
}

void Line::MergeFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_point1()->::chart_proto::Point::MergeFrom(from.point1());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_point2()->::chart_proto::Point::MergeFrom(from.point2());
    }
  }
}

void Line::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Line::CopyFrom(const Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Line::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_point1()) {
    if (!this->point1_->IsInitialized()) return false;
  }
  if (has_point2()) {
    if (!this->point2_->IsInitialized()) return false;
  }
  return true;
}

void Line::Swap(Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Line::InternalSwap(Line* other) {
  using std::swap;
  swap(point1_, other->point1_);
  swap(point2_, other->point2_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Line::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Rectangle::InitAsDefaultInstance() {
  ::chart_proto::_Rectangle_default_instance_._instance.get_mutable()->top_left_ = const_cast< ::chart_proto::Point*>(
      ::chart_proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rectangle::kTopLeftFieldNumber;
const int Rectangle::kWidthFieldNumber;
const int Rectangle::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rectangle::Rectangle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Rectangle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Rectangle)
}
Rectangle::Rectangle(const Rectangle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_top_left()) {
    top_left_ = new ::chart_proto::Point(*from.top_left_);
  } else {
    top_left_ = NULL;
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:chart_proto.Rectangle)
}

void Rectangle::SharedCtor() {
  ::memset(&top_left_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&top_left_)) + sizeof(height_));
}

Rectangle::~Rectangle() {
  // @@protoc_insertion_point(destructor:chart_proto.Rectangle)
  SharedDtor();
}

void Rectangle::SharedDtor() {
  if (this != internal_default_instance()) delete top_left_;
}

void Rectangle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Rectangle::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Rectangle& Rectangle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Rectangle.base);
  return *internal_default_instance();
}


void Rectangle::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(top_left_ != NULL);
    top_left_->Clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Rectangle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Rectangle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .chart_proto.Point top_left = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_top_left()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Rectangle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Rectangle)
  return false;
#undef DO_
}

void Rectangle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chart_proto.Point top_left = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_top_left(), output);
  }

  // required float width = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->width(), output);
  }

  // required float height = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Rectangle)
}

::google::protobuf::uint8* Rectangle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Rectangle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chart_proto.Point top_left = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_top_left(), deterministic, target);
  }

  // required float width = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->width(), target);
  }

  // required float height = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Rectangle)
  return target;
}

size_t Rectangle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chart_proto.Rectangle)
  size_t total_size = 0;

  if (has_top_left()) {
    // required .chart_proto.Point top_left = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *top_left_);
  }

  if (has_width()) {
    // required float width = 2;
    total_size += 1 + 4;
  }

  if (has_height()) {
    // required float height = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Rectangle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Rectangle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .chart_proto.Point top_left = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *top_left_);

    // required float width = 2;
    total_size += 1 + 4;

    // required float height = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Rectangle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  const Rectangle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Rectangle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Rectangle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Rectangle)
    MergeFrom(*source);
  }
}

void Rectangle::MergeFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Rectangle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_top_left()->::chart_proto::Point::MergeFrom(from.top_left());
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Rectangle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Rectangle::CopyFrom(const Rectangle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Rectangle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rectangle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  if (has_top_left()) {
    if (!this->top_left_->IsInitialized()) return false;
  }
  return true;
}

void Rectangle::Swap(Rectangle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rectangle::InternalSwap(Rectangle* other) {
  using std::swap;
  swap(top_left_, other->top_left_);
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Rectangle::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Circle::InitAsDefaultInstance() {
  ::chart_proto::_Circle_default_instance_._instance.get_mutable()->center_ = const_cast< ::chart_proto::Point*>(
      ::chart_proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Circle::kCenterFieldNumber;
const int Circle::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Circle::Circle()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Circle.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Circle)
}
Circle::Circle(const Circle& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_center()) {
    center_ = new ::chart_proto::Point(*from.center_);
  } else {
    center_ = NULL;
  }
  radius_ = from.radius_;
  // @@protoc_insertion_point(copy_constructor:chart_proto.Circle)
}

void Circle::SharedCtor() {
  ::memset(&center_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&center_)) + sizeof(radius_));
}

Circle::~Circle() {
  // @@protoc_insertion_point(destructor:chart_proto.Circle)
  SharedDtor();
}

void Circle::SharedDtor() {
  if (this != internal_default_instance()) delete center_;
}

void Circle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Circle::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Circle& Circle::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Circle.base);
  return *internal_default_instance();
}


void Circle::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(center_ != NULL);
    center_->Clear();
  }
  radius_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Circle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Circle)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .chart_proto.Point center = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float radius = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Circle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Circle)
  return false;
#undef DO_
}

void Circle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chart_proto.Point center = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_center(), output);
  }

  // required float radius = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Circle)
}

::google::protobuf::uint8* Circle::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Circle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .chart_proto.Point center = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_center(), deterministic, target);
  }

  // required float radius = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Circle)
  return target;
}

size_t Circle::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chart_proto.Circle)
  size_t total_size = 0;

  if (has_center()) {
    // required .chart_proto.Point center = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);
  }

  if (has_radius()) {
    // required float radius = 2;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t Circle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Circle)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .chart_proto.Point center = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *center_);

    // required float radius = 2;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Circle::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  const Circle* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Circle>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Circle)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Circle)
    MergeFrom(*source);
  }
}

void Circle::MergeFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Circle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_center()->::chart_proto::Point::MergeFrom(from.center());
    }
    if (cached_has_bits & 0x00000002u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Circle::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Circle::CopyFrom(const Circle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Circle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Circle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  if (has_center()) {
    if (!this->center_->IsInitialized()) return false;
  }
  return true;
}

void Circle::Swap(Circle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Circle::InternalSwap(Circle* other) {
  using std::swap;
  swap(center_, other->center_);
  swap(radius_, other->radius_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Circle::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Polygon::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Polygon::Polygon()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Polygon.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chart_proto.Polygon)
}

void Polygon::SharedCtor() {
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:chart_proto.Polygon)
  SharedDtor();
}

void Polygon::SharedDtor() {
}

void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Polygon::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Polygon& Polygon::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Polygon.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Polygon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Polygon)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chart_proto.Point point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Polygon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Polygon)
  return false;
#undef DO_
}

void Polygon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Polygon)
}

::google::protobuf::uint8* Polygon::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Polygon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Polygon)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chart_proto.Point point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Polygon>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Polygon)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void Polygon::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void Polygon::Swap(Polygon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Polygon::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Spline::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Spline::kPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Spline::Spline()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Spline.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Spline)
}
Spline::Spline(const Spline& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      point_(from.point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chart_proto.Spline)
}

void Spline::SharedCtor() {
}

Spline::~Spline() {
  // @@protoc_insertion_point(destructor:chart_proto.Spline)
  SharedDtor();
}

void Spline::SharedDtor() {
}

void Spline::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Spline::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Spline& Spline::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Spline.base);
  return *internal_default_instance();
}


void Spline::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Spline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Spline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Spline)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chart_proto.Point point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Spline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Spline)
  return false;
#undef DO_
}

void Spline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Spline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->point(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Spline)
}

::google::protobuf::uint8* Spline::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Spline)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Point point = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->point_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->point(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Spline)
  return target;
}

size_t Spline::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Spline)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chart_proto.Point point = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->point_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->point(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Spline::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Spline)
  GOOGLE_DCHECK_NE(&from, this);
  const Spline* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Spline>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Spline)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Spline)
    MergeFrom(*source);
  }
}

void Spline::MergeFrom(const Spline& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Spline)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
}

void Spline::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Spline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Spline::CopyFrom(const Spline& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Spline)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Spline::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->point())) return false;
  return true;
}

void Spline::Swap(Spline* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Spline::InternalSwap(Spline* other) {
  using std::swap;
  CastToBase(&point_)->InternalSwap(CastToBase(&other->point_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Spline::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Text::InitAsDefaultInstance() {
  ::chart_proto::_Text_default_instance_._instance.get_mutable()->point_ = const_cast< ::chart_proto::Point*>(
      ::chart_proto::Point::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Text::kPointFieldNumber;
const int Text::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Text::Text()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Text.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Text)
}
Text::Text(const Text& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_point()) {
    point_ = new ::chart_proto::Point(*from.point_);
  } else {
    point_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chart_proto.Text)
}

void Text::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  point_ = NULL;
}

Text::~Text() {
  // @@protoc_insertion_point(destructor:chart_proto.Text)
  SharedDtor();
}

void Text::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete point_;
}

void Text::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Text::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Text& Text::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Text.base);
  return *internal_default_instance();
}


void Text::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(point_ != NULL);
      point_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Text::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Text)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chart_proto.Point point = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string text = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chart_proto.Text.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Text)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Text)
  return false;
#undef DO_
}

void Text::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Point point = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_point(), output);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chart_proto.Text.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Text)
}

::google::protobuf::uint8* Text::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Text)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Point point = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_point(), deterministic, target);
  }

  // required string text = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chart_proto.Text.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Text)
  return target;
}

size_t Text::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Text)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string text = 2;
  if (has_text()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->text());
  }
  // optional .chart_proto.Point point = 1;
  if (has_point()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *point_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Text::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Text)
  GOOGLE_DCHECK_NE(&from, this);
  const Text* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Text>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Text)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Text)
    MergeFrom(*source);
  }
}

void Text::MergeFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Text)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_point()->::chart_proto::Point::MergeFrom(from.point());
    }
  }
}

void Text::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Text::CopyFrom(const Text& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Text)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Text::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_point()) {
    if (!this->point_->IsInitialized()) return false;
  }
  return true;
}

void Text::Swap(Text* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Text::InternalSwap(Text* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(point_, other->point_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Text::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Shape::InitAsDefaultInstance() {
  ::chart_proto::_Shape_default_instance_._instance.get_mutable()->line_ = const_cast< ::chart_proto::Line*>(
      ::chart_proto::Line::internal_default_instance());
  ::chart_proto::_Shape_default_instance_._instance.get_mutable()->rectangle_ = const_cast< ::chart_proto::Rectangle*>(
      ::chart_proto::Rectangle::internal_default_instance());
  ::chart_proto::_Shape_default_instance_._instance.get_mutable()->circle_ = const_cast< ::chart_proto::Circle*>(
      ::chart_proto::Circle::internal_default_instance());
  ::chart_proto::_Shape_default_instance_._instance.get_mutable()->polygon_ = const_cast< ::chart_proto::Polygon*>(
      ::chart_proto::Polygon::internal_default_instance());
  ::chart_proto::_Shape_default_instance_._instance.get_mutable()->spline_ = const_cast< ::chart_proto::Spline*>(
      ::chart_proto::Spline::internal_default_instance());
  ::chart_proto::_Shape_default_instance_._instance.get_mutable()->text_ = const_cast< ::chart_proto::Text*>(
      ::chart_proto::Text::internal_default_instance());
  ::chart_proto::_Shape_default_instance_._instance.get_mutable()->style_ = const_cast< ::chart_proto::Style*>(
      ::chart_proto::Style::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Shape::kLineFieldNumber;
const int Shape::kRectangleFieldNumber;
const int Shape::kCircleFieldNumber;
const int Shape::kPolygonFieldNumber;
const int Shape::kSplineFieldNumber;
const int Shape::kTextFieldNumber;
const int Shape::kStyleFieldNumber;
const int Shape::kTextOffsetFieldNumber;
const int Shape::kTextLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Shape::Shape()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Shape.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Shape)
}
Shape::Shape(const Shape& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_line()) {
    line_ = new ::chart_proto::Line(*from.line_);
  } else {
    line_ = NULL;
  }
  if (from.has_rectangle()) {
    rectangle_ = new ::chart_proto::Rectangle(*from.rectangle_);
  } else {
    rectangle_ = NULL;
  }
  if (from.has_circle()) {
    circle_ = new ::chart_proto::Circle(*from.circle_);
  } else {
    circle_ = NULL;
  }
  if (from.has_polygon()) {
    polygon_ = new ::chart_proto::Polygon(*from.polygon_);
  } else {
    polygon_ = NULL;
  }
  if (from.has_style()) {
    style_ = new ::chart_proto::Style(*from.style_);
  } else {
    style_ = NULL;
  }
  if (from.has_text()) {
    text_ = new ::chart_proto::Text(*from.text_);
  } else {
    text_ = NULL;
  }
  if (from.has_spline()) {
    spline_ = new ::chart_proto::Spline(*from.spline_);
  } else {
    spline_ = NULL;
  }
  ::memcpy(&text_offset_, &from.text_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&text_length_) -
    reinterpret_cast<char*>(&text_offset_)) + sizeof(text_length_));
  // @@protoc_insertion_point(copy_constructor:chart_proto.Shape)
}

void Shape::SharedCtor() {
  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_length_) -
      reinterpret_cast<char*>(&line_)) + sizeof(text_length_));
}

Shape::~Shape() {
  // @@protoc_insertion_point(destructor:chart_proto.Shape)
  SharedDtor();
}

void Shape::SharedDtor() {
  if (this != internal_default_instance()) delete line_;
  if (this != internal_default_instance()) delete rectangle_;
  if (this != internal_default_instance()) delete circle_;
  if (this != internal_default_instance()) delete polygon_;
  if (this != internal_default_instance()) delete style_;
  if (this != internal_default_instance()) delete text_;
  if (this != internal_default_instance()) delete spline_;
}

void Shape::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Shape::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Shape& Shape::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Shape.base);
  return *internal_default_instance();
}


void Shape::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(line_ != NULL);
      line_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rectangle_ != NULL);
      rectangle_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(circle_ != NULL);
      circle_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(polygon_ != NULL);
      polygon_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(style_ != NULL);
      style_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(text_ != NULL);
      text_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(spline_ != NULL);
      spline_->Clear();
    }
  }
  text_offset_ = 0;
  text_length_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Shape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Shape)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chart_proto.Line line = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Rectangle rectangle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rectangle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Circle circle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_circle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Polygon polygon = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_polygon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Style style = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_style()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 text_offset = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_text_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 text_length = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_text_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Text text = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_text()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Spline spline = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_spline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Shape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Shape)
  return false;
#undef DO_
}

void Shape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Line line = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_line(), output);
  }

  // optional .chart_proto.Rectangle rectangle = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_rectangle(), output);
  }

  // optional .chart_proto.Circle circle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_circle(), output);
  }

  // optional .chart_proto.Polygon polygon = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_polygon(), output);
  }

  // optional .chart_proto.Style style = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_style(), output);
  }

  // optional int32 text_offset = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->text_offset(), output);
  }

  // optional int32 text_length = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->text_length(), output);
  }

  // optional .chart_proto.Text text = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_text(), output);
  }

  // optional .chart_proto.Spline spline = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_spline(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Shape)
}

::google::protobuf::uint8* Shape::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Shape)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Line line = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_line(), deterministic, target);
  }

  // optional .chart_proto.Rectangle rectangle = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_rectangle(), deterministic, target);
  }

  // optional .chart_proto.Circle circle = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_circle(), deterministic, target);
  }

  // optional .chart_proto.Polygon polygon = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_polygon(), deterministic, target);
  }

  // optional .chart_proto.Style style = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_style(), deterministic, target);
  }

  // optional int32 text_offset = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->text_offset(), target);
  }

  // optional int32 text_length = 7;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->text_length(), target);
  }

  // optional .chart_proto.Text text = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_text(), deterministic, target);
  }

  // optional .chart_proto.Spline spline = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_spline(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Shape)
  return target;
}

size_t Shape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Shape)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional .chart_proto.Line line = 1;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *line_);
    }

    // optional .chart_proto.Rectangle rectangle = 2;
    if (has_rectangle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *rectangle_);
    }

    // optional .chart_proto.Circle circle = 3;
    if (has_circle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *circle_);
    }

    // optional .chart_proto.Polygon polygon = 4;
    if (has_polygon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *polygon_);
    }

    // optional .chart_proto.Style style = 5;
    if (has_style()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *style_);
    }

    // optional .chart_proto.Text text = 8;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *text_);
    }

    // optional .chart_proto.Spline spline = 9;
    if (has_spline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *spline_);
    }

    // optional int32 text_offset = 6;
    if (has_text_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_offset());
    }

  }
  // optional int32 text_length = 7;
  if (has_text_length()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->text_length());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Shape::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  const Shape* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Shape>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Shape)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Shape)
    MergeFrom(*source);
  }
}

void Shape::MergeFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Shape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_line()->::chart_proto::Line::MergeFrom(from.line());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rectangle()->::chart_proto::Rectangle::MergeFrom(from.rectangle());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_circle()->::chart_proto::Circle::MergeFrom(from.circle());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_polygon()->::chart_proto::Polygon::MergeFrom(from.polygon());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_style()->::chart_proto::Style::MergeFrom(from.style());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_text()->::chart_proto::Text::MergeFrom(from.text());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_spline()->::chart_proto::Spline::MergeFrom(from.spline());
    }
    if (cached_has_bits & 0x00000080u) {
      text_offset_ = from.text_offset_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_text_length(from.text_length());
  }
}

void Shape::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Shape::CopyFrom(const Shape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Shape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Shape::IsInitialized() const {
  if (has_line()) {
    if (!this->line_->IsInitialized()) return false;
  }
  if (has_rectangle()) {
    if (!this->rectangle_->IsInitialized()) return false;
  }
  if (has_circle()) {
    if (!this->circle_->IsInitialized()) return false;
  }
  if (has_polygon()) {
    if (!this->polygon_->IsInitialized()) return false;
  }
  if (has_style()) {
    if (!this->style_->IsInitialized()) return false;
  }
  if (has_text()) {
    if (!this->text_->IsInitialized()) return false;
  }
  if (has_spline()) {
    if (!this->spline_->IsInitialized()) return false;
  }
  return true;
}

void Shape::Swap(Shape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Shape::InternalSwap(Shape* other) {
  using std::swap;
  swap(line_, other->line_);
  swap(rectangle_, other->rectangle_);
  swap(circle_, other->circle_);
  swap(polygon_, other->polygon_);
  swap(style_, other->style_);
  swap(text_, other->text_);
  swap(spline_, other->spline_);
  swap(text_offset_, other->text_offset_);
  swap(text_length_, other->text_length_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Shape::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Graphic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Graphic::kShapeFieldNumber;
const int Graphic::kWidthFieldNumber;
const int Graphic::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Graphic::Graphic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Graphic.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Graphic)
}
Graphic::Graphic(const Graphic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:chart_proto.Graphic)
}

void Graphic::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

Graphic::~Graphic() {
  // @@protoc_insertion_point(destructor:chart_proto.Graphic)
  SharedDtor();
}

void Graphic::SharedDtor() {
}

void Graphic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Graphic::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Graphic& Graphic::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Graphic.base);
  return *internal_default_instance();
}


void Graphic::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Graphic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  shape_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Graphic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Graphic)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chart_proto.Shape shape = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float width = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Graphic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Graphic)
  return false;
#undef DO_
}

void Graphic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Graphic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Shape shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->shape(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional float width = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->width(), output);
  }

  // optional float height = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Graphic)
}

::google::protobuf::uint8* Graphic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Graphic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Shape shape = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->shape_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->shape(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional float width = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->width(), target);
  }

  // optional float height = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Graphic)
  return target;
}

size_t Graphic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Graphic)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chart_proto.Shape shape = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->shape_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->shape(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional float width = 2;
    if (has_width()) {
      total_size += 1 + 4;
    }

    // optional float height = 3;
    if (has_height()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Graphic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Graphic)
  GOOGLE_DCHECK_NE(&from, this);
  const Graphic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Graphic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Graphic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Graphic)
    MergeFrom(*source);
  }
}

void Graphic::MergeFrom(const Graphic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Graphic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Graphic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Graphic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Graphic::CopyFrom(const Graphic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Graphic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Graphic::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->shape())) return false;
  return true;
}

void Graphic::Swap(Graphic* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Graphic::InternalSwap(Graphic* other) {
  using std::swap;
  CastToBase(&shape_)->InternalSwap(CastToBase(&other->shape_));
  swap(width_, other->width_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Graphic::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Action::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Action::kActionFieldNumber;
const int Action::kWidthFieldNumber;
const int Action::kRepetitionsFieldNumber;
const int Action::kTextOffsetFieldNumber;
const int Action::kTextLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Action::Action()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Action.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Action)
}
Action::Action(const Action& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_action()) {
    action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
  }
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&repetitions_) -
    reinterpret_cast<char*>(&width_)) + sizeof(repetitions_));
  // @@protoc_insertion_point(copy_constructor:chart_proto.Action)
}

void Action::SharedCtor() {
  action_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&text_length_) -
      reinterpret_cast<char*>(&width_)) + sizeof(text_length_));
  repetitions_ = 1;
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:chart_proto.Action)
  SharedDtor();
}

void Action::SharedDtor() {
  action_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Action& Action::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Action.base);
  return *internal_default_instance();
}


void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    action_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&text_length_) -
        reinterpret_cast<char*>(&width_)) + sizeof(text_length_));
    repetitions_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Action)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->action().data(), static_cast<int>(this->action().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chart_proto.Action.action");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 repetitions = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_repetitions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repetitions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 width = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 text_offset = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_text_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 text_length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_text_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &text_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Action)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Action)
  return false;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chart_proto.Action.action");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->action(), output);
  }

  // optional int32 repetitions = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->repetitions(), output);
  }

  // required int32 width = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // optional int32 text_offset = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->text_offset(), output);
  }

  // optional int32 text_length = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->text_length(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Action)
}

::google::protobuf::uint8* Action::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Action)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string action = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->action().data(), static_cast<int>(this->action().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chart_proto.Action.action");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->action(), target);
  }

  // optional int32 repetitions = 2 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->repetitions(), target);
  }

  // required int32 width = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->width(), target);
  }

  // optional int32 text_offset = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->text_offset(), target);
  }

  // optional int32 text_length = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->text_length(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Action)
  return target;
}

size_t Action::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:chart_proto.Action)
  size_t total_size = 0;

  if (has_action()) {
    // required string action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());
  }

  if (has_width()) {
    // required int32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  return total_size;
}
size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Action)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string action = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->action());

    // required int32 width = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 28u) {
    // optional int32 text_offset = 4;
    if (has_text_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_offset());
    }

    // optional int32 text_length = 5;
    if (has_text_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->text_length());
    }

    // optional int32 repetitions = 2 [default = 1];
    if (has_repetitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repetitions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Action)
  GOOGLE_DCHECK_NE(&from, this);
  const Action* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Action>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Action)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Action)
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Action)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_action();
      action_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.action_);
    }
    if (cached_has_bits & 0x00000002u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000004u) {
      text_offset_ = from.text_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      text_length_ = from.text_length_;
    }
    if (cached_has_bits & 0x00000010u) {
      repetitions_ = from.repetitions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void Action::Swap(Action* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Action::InternalSwap(Action* other) {
  using std::swap;
  action_.Swap(&other->action_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(width_, other->width_);
  swap(text_offset_, other->text_offset_);
  swap(text_length_, other->text_length_);
  swap(repetitions_, other->repetitions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Row::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Row::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Row::Row()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Row.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Row)
}
Row::Row(const Row& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      action_(from.action_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chart_proto.Row)
}

void Row::SharedCtor() {
}

Row::~Row() {
  // @@protoc_insertion_point(destructor:chart_proto.Row)
  SharedDtor();
}

void Row::SharedDtor() {
}

void Row::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Row::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Row& Row::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Row.base);
  return *internal_default_instance();
}


void Row::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Row::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Row)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chart_proto.Action action = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_action()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Row)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Row)
  return false;
#undef DO_
}

void Row::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Action action = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->action(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Row)
}

::google::protobuf::uint8* Row::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Row)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Action action = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->action(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Row)
  return target;
}

size_t Row::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Row)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chart_proto.Action action = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->action_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->action(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Row::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Row)
  GOOGLE_DCHECK_NE(&from, this);
  const Row* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Row>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Row)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Row)
    MergeFrom(*source);
  }
}

void Row::MergeFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Row)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_.MergeFrom(from.action_);
}

void Row::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Row::CopyFrom(const Row& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Row)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Row::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->action())) return false;
  return true;
}

void Row::Swap(Row* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Row::InternalSwap(Row* other) {
  using std::swap;
  CastToBase(&action_)->InternalSwap(CastToBase(&other->action_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Row::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ActionType::InitAsDefaultInstance() {
  ::chart_proto::_ActionType_default_instance_._instance.get_mutable()->graphic_ = const_cast< ::chart_proto::Graphic*>(
      ::chart_proto::Graphic::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ActionType::kNameFieldNumber;
const int ActionType::kWidthFieldNumber;
const int ActionType::kGraphicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ActionType::ActionType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_ActionType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.ActionType)
}
ActionType::ActionType(const ActionType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_graphic()) {
    graphic_ = new ::chart_proto::Graphic(*from.graphic_);
  } else {
    graphic_ = NULL;
  }
  width_ = from.width_;
  // @@protoc_insertion_point(copy_constructor:chart_proto.ActionType)
}

void ActionType::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  graphic_ = NULL;
  width_ = 1;
}

ActionType::~ActionType() {
  // @@protoc_insertion_point(destructor:chart_proto.ActionType)
  SharedDtor();
}

void ActionType::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete graphic_;
}

void ActionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ActionType::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ActionType& ActionType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_ActionType.base);
  return *internal_default_instance();
}


void ActionType::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.ActionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(graphic_ != NULL);
      graphic_->Clear();
    }
    width_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ActionType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.ActionType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chart_proto.ActionType.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 width = 2 [default = 1];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Graphic graphic = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graphic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.ActionType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.ActionType)
  return false;
#undef DO_
}

void ActionType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.ActionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chart_proto.ActionType.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional int32 width = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // optional .chart_proto.Graphic graphic = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_graphic(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.ActionType)
}

::google::protobuf::uint8* ActionType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.ActionType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chart_proto.ActionType.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional int32 width = 2 [default = 1];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->width(), target);
  }

  // optional .chart_proto.Graphic graphic = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_graphic(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.ActionType)
  return target;
}

size_t ActionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.ActionType)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .chart_proto.Graphic graphic = 4;
    if (has_graphic()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *graphic_);
    }

    // optional int32 width = 2 [default = 1];
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->width());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActionType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.ActionType)
  GOOGLE_DCHECK_NE(&from, this);
  const ActionType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ActionType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.ActionType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.ActionType)
    MergeFrom(*source);
  }
}

void ActionType::MergeFrom(const ActionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.ActionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_graphic()->::chart_proto::Graphic::MergeFrom(from.graphic());
    }
    if (cached_has_bits & 0x00000004u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ActionType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.ActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActionType::CopyFrom(const ActionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.ActionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActionType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_graphic()) {
    if (!this->graphic_->IsInitialized()) return false;
  }
  return true;
}

void ActionType::Swap(ActionType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ActionType::InternalSwap(ActionType* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(graphic_, other->graphic_);
  swap(width_, other->width_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ActionType::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Library::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Library::kActionTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Library::Library()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Library.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Library)
}
Library::Library(const Library& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      action_type_(from.action_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:chart_proto.Library)
}

void Library::SharedCtor() {
}

Library::~Library() {
  // @@protoc_insertion_point(destructor:chart_proto.Library)
  SharedDtor();
}

void Library::SharedDtor() {
}

void Library::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Library::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Library& Library::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Library.base);
  return *internal_default_instance();
}


void Library::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Library)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_type_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Library::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Library)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chart_proto.ActionType action_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_action_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Library)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Library)
  return false;
#undef DO_
}

void Library::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Library)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.ActionType action_type = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_type_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->action_type(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Library)
}

::google::protobuf::uint8* Library::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Library)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.ActionType action_type = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->action_type_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->action_type(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Library)
  return target;
}

size_t Library::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Library)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chart_proto.ActionType action_type = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->action_type_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->action_type(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Library::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Library)
  GOOGLE_DCHECK_NE(&from, this);
  const Library* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Library>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Library)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Library)
    MergeFrom(*source);
  }
}

void Library::MergeFrom(const Library& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Library)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  action_type_.MergeFrom(from.action_type_);
}

void Library::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Library)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Library::CopyFrom(const Library& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Library)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Library::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->action_type())) return false;
  return true;
}

void Library::Swap(Library* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Library::InternalSwap(Library* other) {
  using std::swap;
  CastToBase(&action_type_)->InternalSwap(CastToBase(&other->action_type_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Library::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Chart::InitAsDefaultInstance() {
  ::chart_proto::_Chart_default_instance_._instance.get_mutable()->library_ = const_cast< ::chart_proto::Library*>(
      ::chart_proto::Library::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chart::kRowFieldNumber;
const int Chart::kLibraryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chart::Chart()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_Chart.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.Chart)
}
Chart::Chart(const Chart& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      row_(from.row_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_library()) {
    library_ = new ::chart_proto::Library(*from.library_);
  } else {
    library_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chart_proto.Chart)
}

void Chart::SharedCtor() {
  library_ = NULL;
}

Chart::~Chart() {
  // @@protoc_insertion_point(destructor:chart_proto.Chart)
  SharedDtor();
}

void Chart::SharedDtor() {
  if (this != internal_default_instance()) delete library_;
}

void Chart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Chart::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Chart& Chart::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_Chart.base);
  return *internal_default_instance();
}


void Chart::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(library_ != NULL);
    library_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.Chart)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .chart_proto.Row row = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_row()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .chart_proto.Library library = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_library()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.Chart)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.Chart)
  return false;
#undef DO_
}

void Chart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Row row = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->row(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Library library = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_library(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.Chart)
}

::google::protobuf::uint8* Chart::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.Chart)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .chart_proto.Row row = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->row_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->row(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Library library = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_library(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.Chart)
  return target;
}

size_t Chart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.Chart)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .chart_proto.Row row = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->row_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->row(static_cast<int>(i)));
    }
  }

  // optional .chart_proto.Library library = 2;
  if (has_library()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *library_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Chart::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  const Chart* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Chart>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.Chart)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.Chart)
    MergeFrom(*source);
  }
}

void Chart::MergeFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.Chart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_.MergeFrom(from.row_);
  if (from.has_library()) {
    mutable_library()->::chart_proto::Library::MergeFrom(from.library());
  }
}

void Chart::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Chart::CopyFrom(const Chart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.Chart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chart::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->row())) return false;
  if (has_library()) {
    if (!this->library_->IsInitialized()) return false;
  }
  return true;
}

void Chart::Swap(Chart* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chart::InternalSwap(Chart* other) {
  using std::swap;
  CastToBase(&row_)->InternalSwap(CastToBase(&other->row_));
  swap(library_, other->library_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Chart::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ChartFile::InitAsDefaultInstance() {
  ::chart_proto::_ChartFile_default_instance_._instance.get_mutable()->library_ = const_cast< ::chart_proto::Library*>(
      ::chart_proto::Library::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChartFile::kLibraryFieldNumber;
const int ChartFile::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChartFile::ChartFile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_storage_2fchart_2eproto::scc_info_ChartFile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:chart_proto.ChartFile)
}
ChartFile::ChartFile(const ChartFile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_text()) {
    text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
  }
  if (from.has_library()) {
    library_ = new ::chart_proto::Library(*from.library_);
  } else {
    library_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:chart_proto.ChartFile)
}

void ChartFile::SharedCtor() {
  text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  library_ = NULL;
}

ChartFile::~ChartFile() {
  // @@protoc_insertion_point(destructor:chart_proto.ChartFile)
  SharedDtor();
}

void ChartFile::SharedDtor() {
  text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete library_;
}

void ChartFile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ChartFile::descriptor() {
  ::protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChartFile& ChartFile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_storage_2fchart_2eproto::scc_info_ChartFile.base);
  return *internal_default_instance();
}


void ChartFile::Clear() {
// @@protoc_insertion_point(message_clear_start:chart_proto.ChartFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      text_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(library_ != NULL);
      library_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChartFile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:chart_proto.ChartFile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .chart_proto.Library library = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_library()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "chart_proto.ChartFile.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:chart_proto.ChartFile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:chart_proto.ChartFile)
  return false;
#undef DO_
}

void ChartFile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:chart_proto.ChartFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Library library = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_library(), output);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chart_proto.ChartFile.text");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->text(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:chart_proto.ChartFile)
}

::google::protobuf::uint8* ChartFile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:chart_proto.ChartFile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .chart_proto.Library library = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_library(), deterministic, target);
  }

  // optional string text = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->text().data(), static_cast<int>(this->text().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "chart_proto.ChartFile.text");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->text(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:chart_proto.ChartFile)
  return target;
}

size_t ChartFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:chart_proto.ChartFile)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string text = 4;
    if (has_text()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
    }

    // optional .chart_proto.Library library = 2;
    if (has_library()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *library_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChartFile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:chart_proto.ChartFile)
  GOOGLE_DCHECK_NE(&from, this);
  const ChartFile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChartFile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:chart_proto.ChartFile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:chart_proto.ChartFile)
    MergeFrom(*source);
  }
}

void ChartFile::MergeFrom(const ChartFile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:chart_proto.ChartFile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_text();
      text_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.text_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_library()->::chart_proto::Library::MergeFrom(from.library());
    }
  }
}

void ChartFile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:chart_proto.ChartFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChartFile::CopyFrom(const ChartFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:chart_proto.ChartFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChartFile::IsInitialized() const {
  if (has_library()) {
    if (!this->library_->IsInitialized()) return false;
  }
  return true;
}

void ChartFile::Swap(ChartFile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChartFile::InternalSwap(ChartFile* other) {
  using std::swap;
  text_.Swap(&other->text_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(library_, other->library_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ChartFile::GetMetadata() const {
  protobuf_storage_2fchart_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_storage_2fchart_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace chart_proto
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Color* Arena::CreateMaybeMessage< ::chart_proto::Color >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Color >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Style* Arena::CreateMaybeMessage< ::chart_proto::Style >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Style >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Point* Arena::CreateMaybeMessage< ::chart_proto::Point >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Point >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Line* Arena::CreateMaybeMessage< ::chart_proto::Line >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Line >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Rectangle* Arena::CreateMaybeMessage< ::chart_proto::Rectangle >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Rectangle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Circle* Arena::CreateMaybeMessage< ::chart_proto::Circle >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Circle >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Polygon* Arena::CreateMaybeMessage< ::chart_proto::Polygon >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Polygon >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Spline* Arena::CreateMaybeMessage< ::chart_proto::Spline >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Spline >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Text* Arena::CreateMaybeMessage< ::chart_proto::Text >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Text >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Shape* Arena::CreateMaybeMessage< ::chart_proto::Shape >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Shape >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Graphic* Arena::CreateMaybeMessage< ::chart_proto::Graphic >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Graphic >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Action* Arena::CreateMaybeMessage< ::chart_proto::Action >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Action >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Row* Arena::CreateMaybeMessage< ::chart_proto::Row >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Row >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::ActionType* Arena::CreateMaybeMessage< ::chart_proto::ActionType >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::ActionType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Library* Arena::CreateMaybeMessage< ::chart_proto::Library >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Library >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::Chart* Arena::CreateMaybeMessage< ::chart_proto::Chart >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::Chart >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::chart_proto::ChartFile* Arena::CreateMaybeMessage< ::chart_proto::ChartFile >(Arena* arena) {
  return Arena::CreateInternal< ::chart_proto::ChartFile >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
