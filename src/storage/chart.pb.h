// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: storage/chart.proto

#ifndef PROTOBUF_INCLUDED_storage_2fchart_2eproto
#define PROTOBUF_INCLUDED_storage_2fchart_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_storage_2fchart_2eproto 

namespace protobuf_storage_2fchart_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[17];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_storage_2fchart_2eproto
namespace chart_proto {
class Action;
class ActionDefaultTypeInternal;
extern ActionDefaultTypeInternal _Action_default_instance_;
class ActionType;
class ActionTypeDefaultTypeInternal;
extern ActionTypeDefaultTypeInternal _ActionType_default_instance_;
class Chart;
class ChartDefaultTypeInternal;
extern ChartDefaultTypeInternal _Chart_default_instance_;
class ChartFile;
class ChartFileDefaultTypeInternal;
extern ChartFileDefaultTypeInternal _ChartFile_default_instance_;
class Circle;
class CircleDefaultTypeInternal;
extern CircleDefaultTypeInternal _Circle_default_instance_;
class Color;
class ColorDefaultTypeInternal;
extern ColorDefaultTypeInternal _Color_default_instance_;
class Graphic;
class GraphicDefaultTypeInternal;
extern GraphicDefaultTypeInternal _Graphic_default_instance_;
class Library;
class LibraryDefaultTypeInternal;
extern LibraryDefaultTypeInternal _Library_default_instance_;
class Line;
class LineDefaultTypeInternal;
extern LineDefaultTypeInternal _Line_default_instance_;
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Rectangle;
class RectangleDefaultTypeInternal;
extern RectangleDefaultTypeInternal _Rectangle_default_instance_;
class Row;
class RowDefaultTypeInternal;
extern RowDefaultTypeInternal _Row_default_instance_;
class Shape;
class ShapeDefaultTypeInternal;
extern ShapeDefaultTypeInternal _Shape_default_instance_;
class Spline;
class SplineDefaultTypeInternal;
extern SplineDefaultTypeInternal _Spline_default_instance_;
class Style;
class StyleDefaultTypeInternal;
extern StyleDefaultTypeInternal _Style_default_instance_;
class Text;
class TextDefaultTypeInternal;
extern TextDefaultTypeInternal _Text_default_instance_;
}  // namespace chart_proto
namespace google {
namespace protobuf {
template<> ::chart_proto::Action* Arena::CreateMaybeMessage<::chart_proto::Action>(Arena*);
template<> ::chart_proto::ActionType* Arena::CreateMaybeMessage<::chart_proto::ActionType>(Arena*);
template<> ::chart_proto::Chart* Arena::CreateMaybeMessage<::chart_proto::Chart>(Arena*);
template<> ::chart_proto::ChartFile* Arena::CreateMaybeMessage<::chart_proto::ChartFile>(Arena*);
template<> ::chart_proto::Circle* Arena::CreateMaybeMessage<::chart_proto::Circle>(Arena*);
template<> ::chart_proto::Color* Arena::CreateMaybeMessage<::chart_proto::Color>(Arena*);
template<> ::chart_proto::Graphic* Arena::CreateMaybeMessage<::chart_proto::Graphic>(Arena*);
template<> ::chart_proto::Library* Arena::CreateMaybeMessage<::chart_proto::Library>(Arena*);
template<> ::chart_proto::Line* Arena::CreateMaybeMessage<::chart_proto::Line>(Arena*);
template<> ::chart_proto::Point* Arena::CreateMaybeMessage<::chart_proto::Point>(Arena*);
template<> ::chart_proto::Polygon* Arena::CreateMaybeMessage<::chart_proto::Polygon>(Arena*);
template<> ::chart_proto::Rectangle* Arena::CreateMaybeMessage<::chart_proto::Rectangle>(Arena*);
template<> ::chart_proto::Row* Arena::CreateMaybeMessage<::chart_proto::Row>(Arena*);
template<> ::chart_proto::Shape* Arena::CreateMaybeMessage<::chart_proto::Shape>(Arena*);
template<> ::chart_proto::Spline* Arena::CreateMaybeMessage<::chart_proto::Spline>(Arena*);
template<> ::chart_proto::Style* Arena::CreateMaybeMessage<::chart_proto::Style>(Arena*);
template<> ::chart_proto::Text* Arena::CreateMaybeMessage<::chart_proto::Text>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace chart_proto {

// ===================================================================

class Color : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Color) */ {
 public:
  Color();
  virtual ~Color();

  Color(const Color& from);

  inline Color& operator=(const Color& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Color(Color&& from) noexcept
    : Color() {
    *this = ::std::move(from);
  }

  inline Color& operator=(Color&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Color& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Color* internal_default_instance() {
    return reinterpret_cast<const Color*>(
               &_Color_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Color* other);
  friend void swap(Color& a, Color& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Color* New() const final {
    return CreateMaybeMessage<Color>(NULL);
  }

  Color* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Color>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Color& from);
  void MergeFrom(const Color& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Color* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 red = 1;
  bool has_red() const;
  void clear_red();
  static const int kRedFieldNumber = 1;
  ::google::protobuf::int32 red() const;
  void set_red(::google::protobuf::int32 value);

  // required int32 green = 2;
  bool has_green() const;
  void clear_green();
  static const int kGreenFieldNumber = 2;
  ::google::protobuf::int32 green() const;
  void set_green(::google::protobuf::int32 value);

  // required int32 blue = 3;
  bool has_blue() const;
  void clear_blue();
  static const int kBlueFieldNumber = 3;
  ::google::protobuf::int32 blue() const;
  void set_blue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chart_proto.Color)
 private:
  void set_has_red();
  void clear_has_red();
  void set_has_green();
  void clear_has_green();
  void set_has_blue();
  void clear_has_blue();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 red_;
  ::google::protobuf::int32 green_;
  ::google::protobuf::int32 blue_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Style : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Style) */ {
 public:
  Style();
  virtual ~Style();

  Style(const Style& from);

  inline Style& operator=(const Style& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Style(Style&& from) noexcept
    : Style() {
    *this = ::std::move(from);
  }

  inline Style& operator=(Style&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Style& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Style* internal_default_instance() {
    return reinterpret_cast<const Style*>(
               &_Style_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Style* other);
  friend void swap(Style& a, Style& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Style* New() const final {
    return CreateMaybeMessage<Style>(NULL);
  }

  Style* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Style>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Style& from);
  void MergeFrom(const Style& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Style* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .chart_proto.Color fill = 1;
  bool has_fill() const;
  void clear_fill();
  static const int kFillFieldNumber = 1;
  private:
  const ::chart_proto::Color& _internal_fill() const;
  public:
  const ::chart_proto::Color& fill() const;
  ::chart_proto::Color* release_fill();
  ::chart_proto::Color* mutable_fill();
  void set_allocated_fill(::chart_proto::Color* fill);

  // optional .chart_proto.Color stroke = 2;
  bool has_stroke() const;
  void clear_stroke();
  static const int kStrokeFieldNumber = 2;
  private:
  const ::chart_proto::Color& _internal_stroke() const;
  public:
  const ::chart_proto::Color& stroke() const;
  ::chart_proto::Color* release_stroke();
  ::chart_proto::Color* mutable_stroke();
  void set_allocated_stroke(::chart_proto::Color* stroke);

  // optional int32 stroke_width = 3 [default = 1];
  bool has_stroke_width() const;
  void clear_stroke_width();
  static const int kStrokeWidthFieldNumber = 3;
  ::google::protobuf::int32 stroke_width() const;
  void set_stroke_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chart_proto.Style)
 private:
  void set_has_fill();
  void clear_has_fill();
  void set_has_stroke();
  void clear_has_stroke();
  void set_has_stroke_width();
  void clear_has_stroke_width();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::chart_proto::Color* fill_;
  ::chart_proto::Color* stroke_;
  ::google::protobuf::int32 stroke_width_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Point) */ {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(Point&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(Point* other);
  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(NULL);
  }

  Point* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // @@protoc_insertion_point(class_scope:chart_proto.Point)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Line : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Line) */ {
 public:
  Line();
  virtual ~Line();

  Line(const Line& from);

  inline Line& operator=(const Line& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Line(Line&& from) noexcept
    : Line() {
    *this = ::std::move(from);
  }

  inline Line& operator=(Line&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Line& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Line* internal_default_instance() {
    return reinterpret_cast<const Line*>(
               &_Line_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(Line* other);
  friend void swap(Line& a, Line& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Line* New() const final {
    return CreateMaybeMessage<Line>(NULL);
  }

  Line* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Line>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Line& from);
  void MergeFrom(const Line& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .chart_proto.Point point1 = 1;
  bool has_point1() const;
  void clear_point1();
  static const int kPoint1FieldNumber = 1;
  private:
  const ::chart_proto::Point& _internal_point1() const;
  public:
  const ::chart_proto::Point& point1() const;
  ::chart_proto::Point* release_point1();
  ::chart_proto::Point* mutable_point1();
  void set_allocated_point1(::chart_proto::Point* point1);

  // required .chart_proto.Point point2 = 2;
  bool has_point2() const;
  void clear_point2();
  static const int kPoint2FieldNumber = 2;
  private:
  const ::chart_proto::Point& _internal_point2() const;
  public:
  const ::chart_proto::Point& point2() const;
  ::chart_proto::Point* release_point2();
  ::chart_proto::Point* mutable_point2();
  void set_allocated_point2(::chart_proto::Point* point2);

  // @@protoc_insertion_point(class_scope:chart_proto.Line)
 private:
  void set_has_point1();
  void clear_has_point1();
  void set_has_point2();
  void clear_has_point2();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::chart_proto::Point* point1_;
  ::chart_proto::Point* point2_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rectangle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Rectangle) */ {
 public:
  Rectangle();
  virtual ~Rectangle();

  Rectangle(const Rectangle& from);

  inline Rectangle& operator=(const Rectangle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rectangle(Rectangle&& from) noexcept
    : Rectangle() {
    *this = ::std::move(from);
  }

  inline Rectangle& operator=(Rectangle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Rectangle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rectangle* internal_default_instance() {
    return reinterpret_cast<const Rectangle*>(
               &_Rectangle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(Rectangle* other);
  friend void swap(Rectangle& a, Rectangle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rectangle* New() const final {
    return CreateMaybeMessage<Rectangle>(NULL);
  }

  Rectangle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Rectangle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Rectangle& from);
  void MergeFrom(const Rectangle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Rectangle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .chart_proto.Point top_left = 1;
  bool has_top_left() const;
  void clear_top_left();
  static const int kTopLeftFieldNumber = 1;
  private:
  const ::chart_proto::Point& _internal_top_left() const;
  public:
  const ::chart_proto::Point& top_left() const;
  ::chart_proto::Point* release_top_left();
  ::chart_proto::Point* mutable_top_left();
  void set_allocated_top_left(::chart_proto::Point* top_left);

  // required float width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  float width() const;
  void set_width(float value);

  // required float height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:chart_proto.Rectangle)
 private:
  void set_has_top_left();
  void clear_has_top_left();
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::chart_proto::Point* top_left_;
  float width_;
  float height_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Circle : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Circle) */ {
 public:
  Circle();
  virtual ~Circle();

  Circle(const Circle& from);

  inline Circle& operator=(const Circle& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Circle(Circle&& from) noexcept
    : Circle() {
    *this = ::std::move(from);
  }

  inline Circle& operator=(Circle&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Circle& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Circle* internal_default_instance() {
    return reinterpret_cast<const Circle*>(
               &_Circle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(Circle* other);
  friend void swap(Circle& a, Circle& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Circle* New() const final {
    return CreateMaybeMessage<Circle>(NULL);
  }

  Circle* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Circle>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Circle& from);
  void MergeFrom(const Circle& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Circle* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .chart_proto.Point center = 1;
  bool has_center() const;
  void clear_center();
  static const int kCenterFieldNumber = 1;
  private:
  const ::chart_proto::Point& _internal_center() const;
  public:
  const ::chart_proto::Point& center() const;
  ::chart_proto::Point* release_center();
  ::chart_proto::Point* mutable_center();
  void set_allocated_center(::chart_proto::Point* center);

  // required float radius = 2;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 2;
  float radius() const;
  void set_radius(float value);

  // @@protoc_insertion_point(class_scope:chart_proto.Circle)
 private:
  void set_has_center();
  void clear_has_center();
  void set_has_radius();
  void clear_has_radius();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::chart_proto::Point* center_;
  float radius_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Polygon : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Polygon) */ {
 public:
  Polygon();
  virtual ~Polygon();

  Polygon(const Polygon& from);

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(Polygon* other);
  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(NULL);
  }

  Polygon* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chart_proto.Point point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  ::chart_proto::Point* mutable_point(int index);
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >*
      mutable_point();
  const ::chart_proto::Point& point(int index) const;
  ::chart_proto::Point* add_point();
  const ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >&
      point() const;

  // @@protoc_insertion_point(class_scope:chart_proto.Polygon)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Point > point_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Spline : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Spline) */ {
 public:
  Spline();
  virtual ~Spline();

  Spline(const Spline& from);

  inline Spline& operator=(const Spline& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Spline(Spline&& from) noexcept
    : Spline() {
    *this = ::std::move(from);
  }

  inline Spline& operator=(Spline&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Spline& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Spline* internal_default_instance() {
    return reinterpret_cast<const Spline*>(
               &_Spline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Spline* other);
  friend void swap(Spline& a, Spline& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Spline* New() const final {
    return CreateMaybeMessage<Spline>(NULL);
  }

  Spline* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Spline>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Spline& from);
  void MergeFrom(const Spline& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Spline* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chart_proto.Point point = 1;
  int point_size() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  ::chart_proto::Point* mutable_point(int index);
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >*
      mutable_point();
  const ::chart_proto::Point& point(int index) const;
  ::chart_proto::Point* add_point();
  const ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >&
      point() const;

  // @@protoc_insertion_point(class_scope:chart_proto.Spline)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Point > point_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Text : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Text) */ {
 public:
  Text();
  virtual ~Text();

  Text(const Text& from);

  inline Text& operator=(const Text& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Text(Text&& from) noexcept
    : Text() {
    *this = ::std::move(from);
  }

  inline Text& operator=(Text&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Text& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Text* internal_default_instance() {
    return reinterpret_cast<const Text*>(
               &_Text_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(Text* other);
  friend void swap(Text& a, Text& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Text* New() const final {
    return CreateMaybeMessage<Text>(NULL);
  }

  Text* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Text>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Text& from);
  void MergeFrom(const Text& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Text* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string text = 2;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 2;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional .chart_proto.Point point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  private:
  const ::chart_proto::Point& _internal_point() const;
  public:
  const ::chart_proto::Point& point() const;
  ::chart_proto::Point* release_point();
  ::chart_proto::Point* mutable_point();
  void set_allocated_point(::chart_proto::Point* point);

  // @@protoc_insertion_point(class_scope:chart_proto.Text)
 private:
  void set_has_point();
  void clear_has_point();
  void set_has_text();
  void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::chart_proto::Point* point_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Shape : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Shape) */ {
 public:
  Shape();
  virtual ~Shape();

  Shape(const Shape& from);

  inline Shape& operator=(const Shape& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Shape(Shape&& from) noexcept
    : Shape() {
    *this = ::std::move(from);
  }

  inline Shape& operator=(Shape&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Shape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Shape* internal_default_instance() {
    return reinterpret_cast<const Shape*>(
               &_Shape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(Shape* other);
  friend void swap(Shape& a, Shape& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Shape* New() const final {
    return CreateMaybeMessage<Shape>(NULL);
  }

  Shape* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Shape>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Shape& from);
  void MergeFrom(const Shape& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Shape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .chart_proto.Line line = 1;
  bool has_line() const;
  void clear_line();
  static const int kLineFieldNumber = 1;
  private:
  const ::chart_proto::Line& _internal_line() const;
  public:
  const ::chart_proto::Line& line() const;
  ::chart_proto::Line* release_line();
  ::chart_proto::Line* mutable_line();
  void set_allocated_line(::chart_proto::Line* line);

  // optional .chart_proto.Rectangle rectangle = 2;
  bool has_rectangle() const;
  void clear_rectangle();
  static const int kRectangleFieldNumber = 2;
  private:
  const ::chart_proto::Rectangle& _internal_rectangle() const;
  public:
  const ::chart_proto::Rectangle& rectangle() const;
  ::chart_proto::Rectangle* release_rectangle();
  ::chart_proto::Rectangle* mutable_rectangle();
  void set_allocated_rectangle(::chart_proto::Rectangle* rectangle);

  // optional .chart_proto.Circle circle = 3;
  bool has_circle() const;
  void clear_circle();
  static const int kCircleFieldNumber = 3;
  private:
  const ::chart_proto::Circle& _internal_circle() const;
  public:
  const ::chart_proto::Circle& circle() const;
  ::chart_proto::Circle* release_circle();
  ::chart_proto::Circle* mutable_circle();
  void set_allocated_circle(::chart_proto::Circle* circle);

  // optional .chart_proto.Polygon polygon = 4;
  bool has_polygon() const;
  void clear_polygon();
  static const int kPolygonFieldNumber = 4;
  private:
  const ::chart_proto::Polygon& _internal_polygon() const;
  public:
  const ::chart_proto::Polygon& polygon() const;
  ::chart_proto::Polygon* release_polygon();
  ::chart_proto::Polygon* mutable_polygon();
  void set_allocated_polygon(::chart_proto::Polygon* polygon);

  // optional .chart_proto.Style style = 5;
  bool has_style() const;
  void clear_style();
  static const int kStyleFieldNumber = 5;
  private:
  const ::chart_proto::Style& _internal_style() const;
  public:
  const ::chart_proto::Style& style() const;
  ::chart_proto::Style* release_style();
  ::chart_proto::Style* mutable_style();
  void set_allocated_style(::chart_proto::Style* style);

  // optional .chart_proto.Text text = 8;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 8;
  private:
  const ::chart_proto::Text& _internal_text() const;
  public:
  const ::chart_proto::Text& text() const;
  ::chart_proto::Text* release_text();
  ::chart_proto::Text* mutable_text();
  void set_allocated_text(::chart_proto::Text* text);

  // optional .chart_proto.Spline spline = 9;
  bool has_spline() const;
  void clear_spline();
  static const int kSplineFieldNumber = 9;
  private:
  const ::chart_proto::Spline& _internal_spline() const;
  public:
  const ::chart_proto::Spline& spline() const;
  ::chart_proto::Spline* release_spline();
  ::chart_proto::Spline* mutable_spline();
  void set_allocated_spline(::chart_proto::Spline* spline);

  // optional int32 text_offset = 6;
  bool has_text_offset() const;
  void clear_text_offset();
  static const int kTextOffsetFieldNumber = 6;
  ::google::protobuf::int32 text_offset() const;
  void set_text_offset(::google::protobuf::int32 value);

  // optional int32 text_length = 7;
  bool has_text_length() const;
  void clear_text_length();
  static const int kTextLengthFieldNumber = 7;
  ::google::protobuf::int32 text_length() const;
  void set_text_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chart_proto.Shape)
 private:
  void set_has_line();
  void clear_has_line();
  void set_has_rectangle();
  void clear_has_rectangle();
  void set_has_circle();
  void clear_has_circle();
  void set_has_polygon();
  void clear_has_polygon();
  void set_has_spline();
  void clear_has_spline();
  void set_has_text();
  void clear_has_text();
  void set_has_style();
  void clear_has_style();
  void set_has_text_offset();
  void clear_has_text_offset();
  void set_has_text_length();
  void clear_has_text_length();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::chart_proto::Line* line_;
  ::chart_proto::Rectangle* rectangle_;
  ::chart_proto::Circle* circle_;
  ::chart_proto::Polygon* polygon_;
  ::chart_proto::Style* style_;
  ::chart_proto::Text* text_;
  ::chart_proto::Spline* spline_;
  ::google::protobuf::int32 text_offset_;
  ::google::protobuf::int32 text_length_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Graphic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Graphic) */ {
 public:
  Graphic();
  virtual ~Graphic();

  Graphic(const Graphic& from);

  inline Graphic& operator=(const Graphic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Graphic(Graphic&& from) noexcept
    : Graphic() {
    *this = ::std::move(from);
  }

  inline Graphic& operator=(Graphic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Graphic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Graphic* internal_default_instance() {
    return reinterpret_cast<const Graphic*>(
               &_Graphic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(Graphic* other);
  friend void swap(Graphic& a, Graphic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Graphic* New() const final {
    return CreateMaybeMessage<Graphic>(NULL);
  }

  Graphic* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Graphic>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Graphic& from);
  void MergeFrom(const Graphic& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Graphic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chart_proto.Shape shape = 1;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 1;
  ::chart_proto::Shape* mutable_shape(int index);
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape >*
      mutable_shape();
  const ::chart_proto::Shape& shape(int index) const;
  ::chart_proto::Shape* add_shape();
  const ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape >&
      shape() const;

  // optional float width = 2;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  float width() const;
  void set_width(float value);

  // optional float height = 3;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  float height() const;
  void set_height(float value);

  // @@protoc_insertion_point(class_scope:chart_proto.Graphic)
 private:
  void set_has_width();
  void clear_has_width();
  void set_has_height();
  void clear_has_height();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape > shape_;
  float width_;
  float height_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Action : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Action) */ {
 public:
  Action();
  virtual ~Action();

  Action(const Action& from);

  inline Action& operator=(const Action& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Action(Action&& from) noexcept
    : Action() {
    *this = ::std::move(from);
  }

  inline Action& operator=(Action&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Action& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Action* internal_default_instance() {
    return reinterpret_cast<const Action*>(
               &_Action_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(Action* other);
  friend void swap(Action& a, Action& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Action* New() const final {
    return CreateMaybeMessage<Action>(NULL);
  }

  Action* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Action>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Action& from);
  void MergeFrom(const Action& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Action* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string action = 1;
  bool has_action() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  const ::std::string& action() const;
  void set_action(const ::std::string& value);
  #if LANG_CXX11
  void set_action(::std::string&& value);
  #endif
  void set_action(const char* value);
  void set_action(const char* value, size_t size);
  ::std::string* mutable_action();
  ::std::string* release_action();
  void set_allocated_action(::std::string* action);

  // required int32 width = 3;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // optional int32 text_offset = 4;
  bool has_text_offset() const;
  void clear_text_offset();
  static const int kTextOffsetFieldNumber = 4;
  ::google::protobuf::int32 text_offset() const;
  void set_text_offset(::google::protobuf::int32 value);

  // optional int32 text_length = 5;
  bool has_text_length() const;
  void clear_text_length();
  static const int kTextLengthFieldNumber = 5;
  ::google::protobuf::int32 text_length() const;
  void set_text_length(::google::protobuf::int32 value);

  // optional int32 repetitions = 2 [default = 1];
  bool has_repetitions() const;
  void clear_repetitions();
  static const int kRepetitionsFieldNumber = 2;
  ::google::protobuf::int32 repetitions() const;
  void set_repetitions(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chart_proto.Action)
 private:
  void set_has_action();
  void clear_has_action();
  void set_has_width();
  void clear_has_width();
  void set_has_repetitions();
  void clear_has_repetitions();
  void set_has_text_offset();
  void clear_has_text_offset();
  void set_has_text_length();
  void clear_has_text_length();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr action_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 text_offset_;
  ::google::protobuf::int32 text_length_;
  ::google::protobuf::int32 repetitions_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Row : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Row) */ {
 public:
  Row();
  virtual ~Row();

  Row(const Row& from);

  inline Row& operator=(const Row& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Row(Row&& from) noexcept
    : Row() {
    *this = ::std::move(from);
  }

  inline Row& operator=(Row&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Row& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Row* internal_default_instance() {
    return reinterpret_cast<const Row*>(
               &_Row_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(Row* other);
  friend void swap(Row& a, Row& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Row* New() const final {
    return CreateMaybeMessage<Row>(NULL);
  }

  Row* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Row>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Row& from);
  void MergeFrom(const Row& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Row* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chart_proto.Action action = 1;
  int action_size() const;
  void clear_action();
  static const int kActionFieldNumber = 1;
  ::chart_proto::Action* mutable_action(int index);
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Action >*
      mutable_action();
  const ::chart_proto::Action& action(int index) const;
  ::chart_proto::Action* add_action();
  const ::google::protobuf::RepeatedPtrField< ::chart_proto::Action >&
      action() const;

  // @@protoc_insertion_point(class_scope:chart_proto.Row)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Action > action_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ActionType : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.ActionType) */ {
 public:
  ActionType();
  virtual ~ActionType();

  ActionType(const ActionType& from);

  inline ActionType& operator=(const ActionType& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ActionType(ActionType&& from) noexcept
    : ActionType() {
    *this = ::std::move(from);
  }

  inline ActionType& operator=(ActionType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActionType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActionType* internal_default_instance() {
    return reinterpret_cast<const ActionType*>(
               &_ActionType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ActionType* other);
  friend void swap(ActionType& a, ActionType& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ActionType* New() const final {
    return CreateMaybeMessage<ActionType>(NULL);
  }

  ActionType* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ActionType>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ActionType& from);
  void MergeFrom(const ActionType& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActionType* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .chart_proto.Graphic graphic = 4;
  bool has_graphic() const;
  void clear_graphic();
  static const int kGraphicFieldNumber = 4;
  private:
  const ::chart_proto::Graphic& _internal_graphic() const;
  public:
  const ::chart_proto::Graphic& graphic() const;
  ::chart_proto::Graphic* release_graphic();
  ::chart_proto::Graphic* mutable_graphic();
  void set_allocated_graphic(::chart_proto::Graphic* graphic);

  // optional int32 width = 2 [default = 1];
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:chart_proto.ActionType)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_width();
  void clear_has_width();
  void set_has_graphic();
  void clear_has_graphic();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::chart_proto::Graphic* graphic_;
  ::google::protobuf::int32 width_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Library : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Library) */ {
 public:
  Library();
  virtual ~Library();

  Library(const Library& from);

  inline Library& operator=(const Library& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Library(Library&& from) noexcept
    : Library() {
    *this = ::std::move(from);
  }

  inline Library& operator=(Library&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Library& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Library* internal_default_instance() {
    return reinterpret_cast<const Library*>(
               &_Library_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(Library* other);
  friend void swap(Library& a, Library& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Library* New() const final {
    return CreateMaybeMessage<Library>(NULL);
  }

  Library* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Library>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Library& from);
  void MergeFrom(const Library& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Library* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chart_proto.ActionType action_type = 1;
  int action_type_size() const;
  void clear_action_type();
  static const int kActionTypeFieldNumber = 1;
  ::chart_proto::ActionType* mutable_action_type(int index);
  ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType >*
      mutable_action_type();
  const ::chart_proto::ActionType& action_type(int index) const;
  ::chart_proto::ActionType* add_action_type();
  const ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType >&
      action_type() const;

  // @@protoc_insertion_point(class_scope:chart_proto.Library)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType > action_type_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Chart : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.Chart) */ {
 public:
  Chart();
  virtual ~Chart();

  Chart(const Chart& from);

  inline Chart& operator=(const Chart& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Chart(Chart&& from) noexcept
    : Chart() {
    *this = ::std::move(from);
  }

  inline Chart& operator=(Chart&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Chart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Chart* internal_default_instance() {
    return reinterpret_cast<const Chart*>(
               &_Chart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(Chart* other);
  friend void swap(Chart& a, Chart& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Chart* New() const final {
    return CreateMaybeMessage<Chart>(NULL);
  }

  Chart* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Chart>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Chart& from);
  void MergeFrom(const Chart& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Chart* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .chart_proto.Row row = 1;
  int row_size() const;
  void clear_row();
  static const int kRowFieldNumber = 1;
  ::chart_proto::Row* mutable_row(int index);
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Row >*
      mutable_row();
  const ::chart_proto::Row& row(int index) const;
  ::chart_proto::Row* add_row();
  const ::google::protobuf::RepeatedPtrField< ::chart_proto::Row >&
      row() const;

  // optional .chart_proto.Library library = 2;
  bool has_library() const;
  void clear_library();
  static const int kLibraryFieldNumber = 2;
  private:
  const ::chart_proto::Library& _internal_library() const;
  public:
  const ::chart_proto::Library& library() const;
  ::chart_proto::Library* release_library();
  ::chart_proto::Library* mutable_library();
  void set_allocated_library(::chart_proto::Library* library);

  // @@protoc_insertion_point(class_scope:chart_proto.Chart)
 private:
  void set_has_library();
  void clear_has_library();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::chart_proto::Row > row_;
  ::chart_proto::Library* library_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChartFile : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:chart_proto.ChartFile) */ {
 public:
  ChartFile();
  virtual ~ChartFile();

  ChartFile(const ChartFile& from);

  inline ChartFile& operator=(const ChartFile& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChartFile(ChartFile&& from) noexcept
    : ChartFile() {
    *this = ::std::move(from);
  }

  inline ChartFile& operator=(ChartFile&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChartFile& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChartFile* internal_default_instance() {
    return reinterpret_cast<const ChartFile*>(
               &_ChartFile_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ChartFile* other);
  friend void swap(ChartFile& a, ChartFile& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChartFile* New() const final {
    return CreateMaybeMessage<ChartFile>(NULL);
  }

  ChartFile* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChartFile>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChartFile& from);
  void MergeFrom(const ChartFile& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChartFile* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string text = 4;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 4;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  // optional .chart_proto.Library library = 2;
  bool has_library() const;
  void clear_library();
  static const int kLibraryFieldNumber = 2;
  private:
  const ::chart_proto::Library& _internal_library() const;
  public:
  const ::chart_proto::Library& library() const;
  ::chart_proto::Library* release_library();
  ::chart_proto::Library* mutable_library();
  void set_allocated_library(::chart_proto::Library* library);

  // @@protoc_insertion_point(class_scope:chart_proto.ChartFile)
 private:
  void set_has_library();
  void clear_has_library();
  void set_has_text();
  void clear_has_text();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr text_;
  ::chart_proto::Library* library_;
  friend struct ::protobuf_storage_2fchart_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Color

// required int32 red = 1;
inline bool Color::has_red() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Color::set_has_red() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Color::clear_has_red() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Color::clear_red() {
  red_ = 0;
  clear_has_red();
}
inline ::google::protobuf::int32 Color::red() const {
  // @@protoc_insertion_point(field_get:chart_proto.Color.red)
  return red_;
}
inline void Color::set_red(::google::protobuf::int32 value) {
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Color.red)
}

// required int32 green = 2;
inline bool Color::has_green() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Color::set_has_green() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Color::clear_has_green() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Color::clear_green() {
  green_ = 0;
  clear_has_green();
}
inline ::google::protobuf::int32 Color::green() const {
  // @@protoc_insertion_point(field_get:chart_proto.Color.green)
  return green_;
}
inline void Color::set_green(::google::protobuf::int32 value) {
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Color.green)
}

// required int32 blue = 3;
inline bool Color::has_blue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Color::set_has_blue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Color::clear_has_blue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Color::clear_blue() {
  blue_ = 0;
  clear_has_blue();
}
inline ::google::protobuf::int32 Color::blue() const {
  // @@protoc_insertion_point(field_get:chart_proto.Color.blue)
  return blue_;
}
inline void Color::set_blue(::google::protobuf::int32 value) {
  set_has_blue();
  blue_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Color.blue)
}

// -------------------------------------------------------------------

// Style

// optional .chart_proto.Color fill = 1;
inline bool Style::has_fill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Style::set_has_fill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Style::clear_has_fill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Style::clear_fill() {
  if (fill_ != NULL) fill_->Clear();
  clear_has_fill();
}
inline const ::chart_proto::Color& Style::_internal_fill() const {
  return *fill_;
}
inline const ::chart_proto::Color& Style::fill() const {
  const ::chart_proto::Color* p = fill_;
  // @@protoc_insertion_point(field_get:chart_proto.Style.fill)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Color*>(
      &::chart_proto::_Color_default_instance_);
}
inline ::chart_proto::Color* Style::release_fill() {
  // @@protoc_insertion_point(field_release:chart_proto.Style.fill)
  clear_has_fill();
  ::chart_proto::Color* temp = fill_;
  fill_ = NULL;
  return temp;
}
inline ::chart_proto::Color* Style::mutable_fill() {
  set_has_fill();
  if (fill_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Color>(GetArenaNoVirtual());
    fill_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Style.fill)
  return fill_;
}
inline void Style::set_allocated_fill(::chart_proto::Color* fill) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete fill_;
  }
  if (fill) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fill = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fill, submessage_arena);
    }
    set_has_fill();
  } else {
    clear_has_fill();
  }
  fill_ = fill;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Style.fill)
}

// optional .chart_proto.Color stroke = 2;
inline bool Style::has_stroke() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Style::set_has_stroke() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Style::clear_has_stroke() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Style::clear_stroke() {
  if (stroke_ != NULL) stroke_->Clear();
  clear_has_stroke();
}
inline const ::chart_proto::Color& Style::_internal_stroke() const {
  return *stroke_;
}
inline const ::chart_proto::Color& Style::stroke() const {
  const ::chart_proto::Color* p = stroke_;
  // @@protoc_insertion_point(field_get:chart_proto.Style.stroke)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Color*>(
      &::chart_proto::_Color_default_instance_);
}
inline ::chart_proto::Color* Style::release_stroke() {
  // @@protoc_insertion_point(field_release:chart_proto.Style.stroke)
  clear_has_stroke();
  ::chart_proto::Color* temp = stroke_;
  stroke_ = NULL;
  return temp;
}
inline ::chart_proto::Color* Style::mutable_stroke() {
  set_has_stroke();
  if (stroke_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Color>(GetArenaNoVirtual());
    stroke_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Style.stroke)
  return stroke_;
}
inline void Style::set_allocated_stroke(::chart_proto::Color* stroke) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete stroke_;
  }
  if (stroke) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stroke = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stroke, submessage_arena);
    }
    set_has_stroke();
  } else {
    clear_has_stroke();
  }
  stroke_ = stroke;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Style.stroke)
}

// optional int32 stroke_width = 3 [default = 1];
inline bool Style::has_stroke_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Style::set_has_stroke_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Style::clear_has_stroke_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Style::clear_stroke_width() {
  stroke_width_ = 1;
  clear_has_stroke_width();
}
inline ::google::protobuf::int32 Style::stroke_width() const {
  // @@protoc_insertion_point(field_get:chart_proto.Style.stroke_width)
  return stroke_width_;
}
inline void Style::set_stroke_width(::google::protobuf::int32 value) {
  set_has_stroke_width();
  stroke_width_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Style.stroke_width)
}

// -------------------------------------------------------------------

// Point

// required float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:chart_proto.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Point.x)
}

// required float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:chart_proto.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Point.y)
}

// -------------------------------------------------------------------

// Line

// required .chart_proto.Point point1 = 1;
inline bool Line::has_point1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Line::set_has_point1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Line::clear_has_point1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Line::clear_point1() {
  if (point1_ != NULL) point1_->Clear();
  clear_has_point1();
}
inline const ::chart_proto::Point& Line::_internal_point1() const {
  return *point1_;
}
inline const ::chart_proto::Point& Line::point1() const {
  const ::chart_proto::Point* p = point1_;
  // @@protoc_insertion_point(field_get:chart_proto.Line.point1)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Point*>(
      &::chart_proto::_Point_default_instance_);
}
inline ::chart_proto::Point* Line::release_point1() {
  // @@protoc_insertion_point(field_release:chart_proto.Line.point1)
  clear_has_point1();
  ::chart_proto::Point* temp = point1_;
  point1_ = NULL;
  return temp;
}
inline ::chart_proto::Point* Line::mutable_point1() {
  set_has_point1();
  if (point1_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Point>(GetArenaNoVirtual());
    point1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Line.point1)
  return point1_;
}
inline void Line::set_allocated_point1(::chart_proto::Point* point1) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point1_;
  }
  if (point1) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point1 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point1, submessage_arena);
    }
    set_has_point1();
  } else {
    clear_has_point1();
  }
  point1_ = point1;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Line.point1)
}

// required .chart_proto.Point point2 = 2;
inline bool Line::has_point2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Line::set_has_point2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Line::clear_has_point2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Line::clear_point2() {
  if (point2_ != NULL) point2_->Clear();
  clear_has_point2();
}
inline const ::chart_proto::Point& Line::_internal_point2() const {
  return *point2_;
}
inline const ::chart_proto::Point& Line::point2() const {
  const ::chart_proto::Point* p = point2_;
  // @@protoc_insertion_point(field_get:chart_proto.Line.point2)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Point*>(
      &::chart_proto::_Point_default_instance_);
}
inline ::chart_proto::Point* Line::release_point2() {
  // @@protoc_insertion_point(field_release:chart_proto.Line.point2)
  clear_has_point2();
  ::chart_proto::Point* temp = point2_;
  point2_ = NULL;
  return temp;
}
inline ::chart_proto::Point* Line::mutable_point2() {
  set_has_point2();
  if (point2_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Point>(GetArenaNoVirtual());
    point2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Line.point2)
  return point2_;
}
inline void Line::set_allocated_point2(::chart_proto::Point* point2) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point2_;
  }
  if (point2) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point2 = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point2, submessage_arena);
    }
    set_has_point2();
  } else {
    clear_has_point2();
  }
  point2_ = point2;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Line.point2)
}

// -------------------------------------------------------------------

// Rectangle

// required .chart_proto.Point top_left = 1;
inline bool Rectangle::has_top_left() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Rectangle::set_has_top_left() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Rectangle::clear_has_top_left() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Rectangle::clear_top_left() {
  if (top_left_ != NULL) top_left_->Clear();
  clear_has_top_left();
}
inline const ::chart_proto::Point& Rectangle::_internal_top_left() const {
  return *top_left_;
}
inline const ::chart_proto::Point& Rectangle::top_left() const {
  const ::chart_proto::Point* p = top_left_;
  // @@protoc_insertion_point(field_get:chart_proto.Rectangle.top_left)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Point*>(
      &::chart_proto::_Point_default_instance_);
}
inline ::chart_proto::Point* Rectangle::release_top_left() {
  // @@protoc_insertion_point(field_release:chart_proto.Rectangle.top_left)
  clear_has_top_left();
  ::chart_proto::Point* temp = top_left_;
  top_left_ = NULL;
  return temp;
}
inline ::chart_proto::Point* Rectangle::mutable_top_left() {
  set_has_top_left();
  if (top_left_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Point>(GetArenaNoVirtual());
    top_left_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Rectangle.top_left)
  return top_left_;
}
inline void Rectangle::set_allocated_top_left(::chart_proto::Point* top_left) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete top_left_;
  }
  if (top_left) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      top_left = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, top_left, submessage_arena);
    }
    set_has_top_left();
  } else {
    clear_has_top_left();
  }
  top_left_ = top_left;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Rectangle.top_left)
}

// required float width = 2;
inline bool Rectangle::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Rectangle::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Rectangle::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Rectangle::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Rectangle::width() const {
  // @@protoc_insertion_point(field_get:chart_proto.Rectangle.width)
  return width_;
}
inline void Rectangle::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Rectangle.width)
}

// required float height = 3;
inline bool Rectangle::has_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Rectangle::set_has_height() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Rectangle::clear_has_height() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Rectangle::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Rectangle::height() const {
  // @@protoc_insertion_point(field_get:chart_proto.Rectangle.height)
  return height_;
}
inline void Rectangle::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Rectangle.height)
}

// -------------------------------------------------------------------

// Circle

// required .chart_proto.Point center = 1;
inline bool Circle::has_center() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Circle::set_has_center() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Circle::clear_has_center() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Circle::clear_center() {
  if (center_ != NULL) center_->Clear();
  clear_has_center();
}
inline const ::chart_proto::Point& Circle::_internal_center() const {
  return *center_;
}
inline const ::chart_proto::Point& Circle::center() const {
  const ::chart_proto::Point* p = center_;
  // @@protoc_insertion_point(field_get:chart_proto.Circle.center)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Point*>(
      &::chart_proto::_Point_default_instance_);
}
inline ::chart_proto::Point* Circle::release_center() {
  // @@protoc_insertion_point(field_release:chart_proto.Circle.center)
  clear_has_center();
  ::chart_proto::Point* temp = center_;
  center_ = NULL;
  return temp;
}
inline ::chart_proto::Point* Circle::mutable_center() {
  set_has_center();
  if (center_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Point>(GetArenaNoVirtual());
    center_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Circle.center)
  return center_;
}
inline void Circle::set_allocated_center(::chart_proto::Point* center) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete center_;
  }
  if (center) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      center = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    set_has_center();
  } else {
    clear_has_center();
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Circle.center)
}

// required float radius = 2;
inline bool Circle::has_radius() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Circle::set_has_radius() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Circle::clear_has_radius() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Circle::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline float Circle::radius() const {
  // @@protoc_insertion_point(field_get:chart_proto.Circle.radius)
  return radius_;
}
inline void Circle::set_radius(float value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Circle.radius)
}

// -------------------------------------------------------------------

// Polygon

// repeated .chart_proto.Point point = 1;
inline int Polygon::point_size() const {
  return point_.size();
}
inline void Polygon::clear_point() {
  point_.Clear();
}
inline ::chart_proto::Point* Polygon::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:chart_proto.Polygon.point)
  return point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >*
Polygon::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:chart_proto.Polygon.point)
  return &point_;
}
inline const ::chart_proto::Point& Polygon::point(int index) const {
  // @@protoc_insertion_point(field_get:chart_proto.Polygon.point)
  return point_.Get(index);
}
inline ::chart_proto::Point* Polygon::add_point() {
  // @@protoc_insertion_point(field_add:chart_proto.Polygon.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >&
Polygon::point() const {
  // @@protoc_insertion_point(field_list:chart_proto.Polygon.point)
  return point_;
}

// -------------------------------------------------------------------

// Spline

// repeated .chart_proto.Point point = 1;
inline int Spline::point_size() const {
  return point_.size();
}
inline void Spline::clear_point() {
  point_.Clear();
}
inline ::chart_proto::Point* Spline::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:chart_proto.Spline.point)
  return point_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >*
Spline::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:chart_proto.Spline.point)
  return &point_;
}
inline const ::chart_proto::Point& Spline::point(int index) const {
  // @@protoc_insertion_point(field_get:chart_proto.Spline.point)
  return point_.Get(index);
}
inline ::chart_proto::Point* Spline::add_point() {
  // @@protoc_insertion_point(field_add:chart_proto.Spline.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Point >&
Spline::point() const {
  // @@protoc_insertion_point(field_list:chart_proto.Spline.point)
  return point_;
}

// -------------------------------------------------------------------

// Text

// optional .chart_proto.Point point = 1;
inline bool Text::has_point() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Text::set_has_point() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Text::clear_has_point() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Text::clear_point() {
  if (point_ != NULL) point_->Clear();
  clear_has_point();
}
inline const ::chart_proto::Point& Text::_internal_point() const {
  return *point_;
}
inline const ::chart_proto::Point& Text::point() const {
  const ::chart_proto::Point* p = point_;
  // @@protoc_insertion_point(field_get:chart_proto.Text.point)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Point*>(
      &::chart_proto::_Point_default_instance_);
}
inline ::chart_proto::Point* Text::release_point() {
  // @@protoc_insertion_point(field_release:chart_proto.Text.point)
  clear_has_point();
  ::chart_proto::Point* temp = point_;
  point_ = NULL;
  return temp;
}
inline ::chart_proto::Point* Text::mutable_point() {
  set_has_point();
  if (point_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Point>(GetArenaNoVirtual());
    point_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Text.point)
  return point_;
}
inline void Text::set_allocated_point(::chart_proto::Point* point) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete point_;
  }
  if (point) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      point = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    set_has_point();
  } else {
    clear_has_point();
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Text.point)
}

// required string text = 2;
inline bool Text::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Text::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Text::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Text::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& Text::text() const {
  // @@protoc_insertion_point(field_get:chart_proto.Text.text)
  return text_.GetNoArena();
}
inline void Text::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chart_proto.Text.text)
}
#if LANG_CXX11
inline void Text::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chart_proto.Text.text)
}
#endif
inline void Text::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chart_proto.Text.text)
}
inline void Text::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chart_proto.Text.text)
}
inline ::std::string* Text::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:chart_proto.Text.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Text::release_text() {
  // @@protoc_insertion_point(field_release:chart_proto.Text.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Text::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Text.text)
}

// -------------------------------------------------------------------

// Shape

// optional .chart_proto.Line line = 1;
inline bool Shape::has_line() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Shape::set_has_line() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Shape::clear_has_line() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Shape::clear_line() {
  if (line_ != NULL) line_->Clear();
  clear_has_line();
}
inline const ::chart_proto::Line& Shape::_internal_line() const {
  return *line_;
}
inline const ::chart_proto::Line& Shape::line() const {
  const ::chart_proto::Line* p = line_;
  // @@protoc_insertion_point(field_get:chart_proto.Shape.line)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Line*>(
      &::chart_proto::_Line_default_instance_);
}
inline ::chart_proto::Line* Shape::release_line() {
  // @@protoc_insertion_point(field_release:chart_proto.Shape.line)
  clear_has_line();
  ::chart_proto::Line* temp = line_;
  line_ = NULL;
  return temp;
}
inline ::chart_proto::Line* Shape::mutable_line() {
  set_has_line();
  if (line_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Line>(GetArenaNoVirtual());
    line_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Shape.line)
  return line_;
}
inline void Shape::set_allocated_line(::chart_proto::Line* line) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete line_;
  }
  if (line) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      line = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, line, submessage_arena);
    }
    set_has_line();
  } else {
    clear_has_line();
  }
  line_ = line;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Shape.line)
}

// optional .chart_proto.Rectangle rectangle = 2;
inline bool Shape::has_rectangle() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Shape::set_has_rectangle() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Shape::clear_has_rectangle() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Shape::clear_rectangle() {
  if (rectangle_ != NULL) rectangle_->Clear();
  clear_has_rectangle();
}
inline const ::chart_proto::Rectangle& Shape::_internal_rectangle() const {
  return *rectangle_;
}
inline const ::chart_proto::Rectangle& Shape::rectangle() const {
  const ::chart_proto::Rectangle* p = rectangle_;
  // @@protoc_insertion_point(field_get:chart_proto.Shape.rectangle)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Rectangle*>(
      &::chart_proto::_Rectangle_default_instance_);
}
inline ::chart_proto::Rectangle* Shape::release_rectangle() {
  // @@protoc_insertion_point(field_release:chart_proto.Shape.rectangle)
  clear_has_rectangle();
  ::chart_proto::Rectangle* temp = rectangle_;
  rectangle_ = NULL;
  return temp;
}
inline ::chart_proto::Rectangle* Shape::mutable_rectangle() {
  set_has_rectangle();
  if (rectangle_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Rectangle>(GetArenaNoVirtual());
    rectangle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Shape.rectangle)
  return rectangle_;
}
inline void Shape::set_allocated_rectangle(::chart_proto::Rectangle* rectangle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rectangle_;
  }
  if (rectangle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rectangle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rectangle, submessage_arena);
    }
    set_has_rectangle();
  } else {
    clear_has_rectangle();
  }
  rectangle_ = rectangle;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Shape.rectangle)
}

// optional .chart_proto.Circle circle = 3;
inline bool Shape::has_circle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Shape::set_has_circle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Shape::clear_has_circle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Shape::clear_circle() {
  if (circle_ != NULL) circle_->Clear();
  clear_has_circle();
}
inline const ::chart_proto::Circle& Shape::_internal_circle() const {
  return *circle_;
}
inline const ::chart_proto::Circle& Shape::circle() const {
  const ::chart_proto::Circle* p = circle_;
  // @@protoc_insertion_point(field_get:chart_proto.Shape.circle)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Circle*>(
      &::chart_proto::_Circle_default_instance_);
}
inline ::chart_proto::Circle* Shape::release_circle() {
  // @@protoc_insertion_point(field_release:chart_proto.Shape.circle)
  clear_has_circle();
  ::chart_proto::Circle* temp = circle_;
  circle_ = NULL;
  return temp;
}
inline ::chart_proto::Circle* Shape::mutable_circle() {
  set_has_circle();
  if (circle_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Circle>(GetArenaNoVirtual());
    circle_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Shape.circle)
  return circle_;
}
inline void Shape::set_allocated_circle(::chart_proto::Circle* circle) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete circle_;
  }
  if (circle) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      circle = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, circle, submessage_arena);
    }
    set_has_circle();
  } else {
    clear_has_circle();
  }
  circle_ = circle;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Shape.circle)
}

// optional .chart_proto.Polygon polygon = 4;
inline bool Shape::has_polygon() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Shape::set_has_polygon() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Shape::clear_has_polygon() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Shape::clear_polygon() {
  if (polygon_ != NULL) polygon_->Clear();
  clear_has_polygon();
}
inline const ::chart_proto::Polygon& Shape::_internal_polygon() const {
  return *polygon_;
}
inline const ::chart_proto::Polygon& Shape::polygon() const {
  const ::chart_proto::Polygon* p = polygon_;
  // @@protoc_insertion_point(field_get:chart_proto.Shape.polygon)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Polygon*>(
      &::chart_proto::_Polygon_default_instance_);
}
inline ::chart_proto::Polygon* Shape::release_polygon() {
  // @@protoc_insertion_point(field_release:chart_proto.Shape.polygon)
  clear_has_polygon();
  ::chart_proto::Polygon* temp = polygon_;
  polygon_ = NULL;
  return temp;
}
inline ::chart_proto::Polygon* Shape::mutable_polygon() {
  set_has_polygon();
  if (polygon_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Polygon>(GetArenaNoVirtual());
    polygon_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Shape.polygon)
  return polygon_;
}
inline void Shape::set_allocated_polygon(::chart_proto::Polygon* polygon) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete polygon_;
  }
  if (polygon) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      polygon = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, polygon, submessage_arena);
    }
    set_has_polygon();
  } else {
    clear_has_polygon();
  }
  polygon_ = polygon;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Shape.polygon)
}

// optional .chart_proto.Spline spline = 9;
inline bool Shape::has_spline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Shape::set_has_spline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Shape::clear_has_spline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Shape::clear_spline() {
  if (spline_ != NULL) spline_->Clear();
  clear_has_spline();
}
inline const ::chart_proto::Spline& Shape::_internal_spline() const {
  return *spline_;
}
inline const ::chart_proto::Spline& Shape::spline() const {
  const ::chart_proto::Spline* p = spline_;
  // @@protoc_insertion_point(field_get:chart_proto.Shape.spline)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Spline*>(
      &::chart_proto::_Spline_default_instance_);
}
inline ::chart_proto::Spline* Shape::release_spline() {
  // @@protoc_insertion_point(field_release:chart_proto.Shape.spline)
  clear_has_spline();
  ::chart_proto::Spline* temp = spline_;
  spline_ = NULL;
  return temp;
}
inline ::chart_proto::Spline* Shape::mutable_spline() {
  set_has_spline();
  if (spline_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Spline>(GetArenaNoVirtual());
    spline_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Shape.spline)
  return spline_;
}
inline void Shape::set_allocated_spline(::chart_proto::Spline* spline) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete spline_;
  }
  if (spline) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      spline = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, spline, submessage_arena);
    }
    set_has_spline();
  } else {
    clear_has_spline();
  }
  spline_ = spline;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Shape.spline)
}

// optional .chart_proto.Text text = 8;
inline bool Shape::has_text() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Shape::set_has_text() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Shape::clear_has_text() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Shape::clear_text() {
  if (text_ != NULL) text_->Clear();
  clear_has_text();
}
inline const ::chart_proto::Text& Shape::_internal_text() const {
  return *text_;
}
inline const ::chart_proto::Text& Shape::text() const {
  const ::chart_proto::Text* p = text_;
  // @@protoc_insertion_point(field_get:chart_proto.Shape.text)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Text*>(
      &::chart_proto::_Text_default_instance_);
}
inline ::chart_proto::Text* Shape::release_text() {
  // @@protoc_insertion_point(field_release:chart_proto.Shape.text)
  clear_has_text();
  ::chart_proto::Text* temp = text_;
  text_ = NULL;
  return temp;
}
inline ::chart_proto::Text* Shape::mutable_text() {
  set_has_text();
  if (text_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Text>(GetArenaNoVirtual());
    text_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Shape.text)
  return text_;
}
inline void Shape::set_allocated_text(::chart_proto::Text* text) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete text_;
  }
  if (text) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      text = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, text, submessage_arena);
    }
    set_has_text();
  } else {
    clear_has_text();
  }
  text_ = text;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Shape.text)
}

// optional .chart_proto.Style style = 5;
inline bool Shape::has_style() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Shape::set_has_style() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Shape::clear_has_style() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Shape::clear_style() {
  if (style_ != NULL) style_->Clear();
  clear_has_style();
}
inline const ::chart_proto::Style& Shape::_internal_style() const {
  return *style_;
}
inline const ::chart_proto::Style& Shape::style() const {
  const ::chart_proto::Style* p = style_;
  // @@protoc_insertion_point(field_get:chart_proto.Shape.style)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Style*>(
      &::chart_proto::_Style_default_instance_);
}
inline ::chart_proto::Style* Shape::release_style() {
  // @@protoc_insertion_point(field_release:chart_proto.Shape.style)
  clear_has_style();
  ::chart_proto::Style* temp = style_;
  style_ = NULL;
  return temp;
}
inline ::chart_proto::Style* Shape::mutable_style() {
  set_has_style();
  if (style_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Style>(GetArenaNoVirtual());
    style_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Shape.style)
  return style_;
}
inline void Shape::set_allocated_style(::chart_proto::Style* style) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete style_;
  }
  if (style) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      style = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, style, submessage_arena);
    }
    set_has_style();
  } else {
    clear_has_style();
  }
  style_ = style;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Shape.style)
}

// optional int32 text_offset = 6;
inline bool Shape::has_text_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Shape::set_has_text_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Shape::clear_has_text_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Shape::clear_text_offset() {
  text_offset_ = 0;
  clear_has_text_offset();
}
inline ::google::protobuf::int32 Shape::text_offset() const {
  // @@protoc_insertion_point(field_get:chart_proto.Shape.text_offset)
  return text_offset_;
}
inline void Shape::set_text_offset(::google::protobuf::int32 value) {
  set_has_text_offset();
  text_offset_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Shape.text_offset)
}

// optional int32 text_length = 7;
inline bool Shape::has_text_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Shape::set_has_text_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Shape::clear_has_text_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Shape::clear_text_length() {
  text_length_ = 0;
  clear_has_text_length();
}
inline ::google::protobuf::int32 Shape::text_length() const {
  // @@protoc_insertion_point(field_get:chart_proto.Shape.text_length)
  return text_length_;
}
inline void Shape::set_text_length(::google::protobuf::int32 value) {
  set_has_text_length();
  text_length_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Shape.text_length)
}

// -------------------------------------------------------------------

// Graphic

// repeated .chart_proto.Shape shape = 1;
inline int Graphic::shape_size() const {
  return shape_.size();
}
inline void Graphic::clear_shape() {
  shape_.Clear();
}
inline ::chart_proto::Shape* Graphic::mutable_shape(int index) {
  // @@protoc_insertion_point(field_mutable:chart_proto.Graphic.shape)
  return shape_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape >*
Graphic::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:chart_proto.Graphic.shape)
  return &shape_;
}
inline const ::chart_proto::Shape& Graphic::shape(int index) const {
  // @@protoc_insertion_point(field_get:chart_proto.Graphic.shape)
  return shape_.Get(index);
}
inline ::chart_proto::Shape* Graphic::add_shape() {
  // @@protoc_insertion_point(field_add:chart_proto.Graphic.shape)
  return shape_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Shape >&
Graphic::shape() const {
  // @@protoc_insertion_point(field_list:chart_proto.Graphic.shape)
  return shape_;
}

// optional float width = 2;
inline bool Graphic::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Graphic::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Graphic::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Graphic::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline float Graphic::width() const {
  // @@protoc_insertion_point(field_get:chart_proto.Graphic.width)
  return width_;
}
inline void Graphic::set_width(float value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Graphic.width)
}

// optional float height = 3;
inline bool Graphic::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Graphic::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Graphic::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Graphic::clear_height() {
  height_ = 0;
  clear_has_height();
}
inline float Graphic::height() const {
  // @@protoc_insertion_point(field_get:chart_proto.Graphic.height)
  return height_;
}
inline void Graphic::set_height(float value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Graphic.height)
}

// -------------------------------------------------------------------

// Action

// required string action = 1;
inline bool Action::has_action() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Action::set_has_action() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Action::clear_has_action() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Action::clear_action() {
  action_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_action();
}
inline const ::std::string& Action::action() const {
  // @@protoc_insertion_point(field_get:chart_proto.Action.action)
  return action_.GetNoArena();
}
inline void Action::set_action(const ::std::string& value) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chart_proto.Action.action)
}
#if LANG_CXX11
inline void Action::set_action(::std::string&& value) {
  set_has_action();
  action_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chart_proto.Action.action)
}
#endif
inline void Action::set_action(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chart_proto.Action.action)
}
inline void Action::set_action(const char* value, size_t size) {
  set_has_action();
  action_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chart_proto.Action.action)
}
inline ::std::string* Action::mutable_action() {
  set_has_action();
  // @@protoc_insertion_point(field_mutable:chart_proto.Action.action)
  return action_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Action::release_action() {
  // @@protoc_insertion_point(field_release:chart_proto.Action.action)
  if (!has_action()) {
    return NULL;
  }
  clear_has_action();
  return action_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Action::set_allocated_action(::std::string* action) {
  if (action != NULL) {
    set_has_action();
  } else {
    clear_has_action();
  }
  action_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), action);
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Action.action)
}

// required int32 width = 3;
inline bool Action::has_width() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Action::set_has_width() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Action::clear_has_width() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Action::clear_width() {
  width_ = 0;
  clear_has_width();
}
inline ::google::protobuf::int32 Action::width() const {
  // @@protoc_insertion_point(field_get:chart_proto.Action.width)
  return width_;
}
inline void Action::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Action.width)
}

// optional int32 repetitions = 2 [default = 1];
inline bool Action::has_repetitions() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Action::set_has_repetitions() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Action::clear_has_repetitions() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Action::clear_repetitions() {
  repetitions_ = 1;
  clear_has_repetitions();
}
inline ::google::protobuf::int32 Action::repetitions() const {
  // @@protoc_insertion_point(field_get:chart_proto.Action.repetitions)
  return repetitions_;
}
inline void Action::set_repetitions(::google::protobuf::int32 value) {
  set_has_repetitions();
  repetitions_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Action.repetitions)
}

// optional int32 text_offset = 4;
inline bool Action::has_text_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Action::set_has_text_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Action::clear_has_text_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Action::clear_text_offset() {
  text_offset_ = 0;
  clear_has_text_offset();
}
inline ::google::protobuf::int32 Action::text_offset() const {
  // @@protoc_insertion_point(field_get:chart_proto.Action.text_offset)
  return text_offset_;
}
inline void Action::set_text_offset(::google::protobuf::int32 value) {
  set_has_text_offset();
  text_offset_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Action.text_offset)
}

// optional int32 text_length = 5;
inline bool Action::has_text_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Action::set_has_text_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Action::clear_has_text_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Action::clear_text_length() {
  text_length_ = 0;
  clear_has_text_length();
}
inline ::google::protobuf::int32 Action::text_length() const {
  // @@protoc_insertion_point(field_get:chart_proto.Action.text_length)
  return text_length_;
}
inline void Action::set_text_length(::google::protobuf::int32 value) {
  set_has_text_length();
  text_length_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.Action.text_length)
}

// -------------------------------------------------------------------

// Row

// repeated .chart_proto.Action action = 1;
inline int Row::action_size() const {
  return action_.size();
}
inline void Row::clear_action() {
  action_.Clear();
}
inline ::chart_proto::Action* Row::mutable_action(int index) {
  // @@protoc_insertion_point(field_mutable:chart_proto.Row.action)
  return action_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Action >*
Row::mutable_action() {
  // @@protoc_insertion_point(field_mutable_list:chart_proto.Row.action)
  return &action_;
}
inline const ::chart_proto::Action& Row::action(int index) const {
  // @@protoc_insertion_point(field_get:chart_proto.Row.action)
  return action_.Get(index);
}
inline ::chart_proto::Action* Row::add_action() {
  // @@protoc_insertion_point(field_add:chart_proto.Row.action)
  return action_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Action >&
Row::action() const {
  // @@protoc_insertion_point(field_list:chart_proto.Row.action)
  return action_;
}

// -------------------------------------------------------------------

// ActionType

// required string name = 1;
inline bool ActionType::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActionType::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActionType::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActionType::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ActionType::name() const {
  // @@protoc_insertion_point(field_get:chart_proto.ActionType.name)
  return name_.GetNoArena();
}
inline void ActionType::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chart_proto.ActionType.name)
}
#if LANG_CXX11
inline void ActionType::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chart_proto.ActionType.name)
}
#endif
inline void ActionType::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chart_proto.ActionType.name)
}
inline void ActionType::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chart_proto.ActionType.name)
}
inline ::std::string* ActionType::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:chart_proto.ActionType.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ActionType::release_name() {
  // @@protoc_insertion_point(field_release:chart_proto.ActionType.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ActionType::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:chart_proto.ActionType.name)
}

// optional int32 width = 2 [default = 1];
inline bool ActionType::has_width() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActionType::set_has_width() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActionType::clear_has_width() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActionType::clear_width() {
  width_ = 1;
  clear_has_width();
}
inline ::google::protobuf::int32 ActionType::width() const {
  // @@protoc_insertion_point(field_get:chart_proto.ActionType.width)
  return width_;
}
inline void ActionType::set_width(::google::protobuf::int32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:chart_proto.ActionType.width)
}

// optional .chart_proto.Graphic graphic = 4;
inline bool ActionType::has_graphic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActionType::set_has_graphic() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActionType::clear_has_graphic() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActionType::clear_graphic() {
  if (graphic_ != NULL) graphic_->Clear();
  clear_has_graphic();
}
inline const ::chart_proto::Graphic& ActionType::_internal_graphic() const {
  return *graphic_;
}
inline const ::chart_proto::Graphic& ActionType::graphic() const {
  const ::chart_proto::Graphic* p = graphic_;
  // @@protoc_insertion_point(field_get:chart_proto.ActionType.graphic)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Graphic*>(
      &::chart_proto::_Graphic_default_instance_);
}
inline ::chart_proto::Graphic* ActionType::release_graphic() {
  // @@protoc_insertion_point(field_release:chart_proto.ActionType.graphic)
  clear_has_graphic();
  ::chart_proto::Graphic* temp = graphic_;
  graphic_ = NULL;
  return temp;
}
inline ::chart_proto::Graphic* ActionType::mutable_graphic() {
  set_has_graphic();
  if (graphic_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Graphic>(GetArenaNoVirtual());
    graphic_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.ActionType.graphic)
  return graphic_;
}
inline void ActionType::set_allocated_graphic(::chart_proto::Graphic* graphic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete graphic_;
  }
  if (graphic) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      graphic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graphic, submessage_arena);
    }
    set_has_graphic();
  } else {
    clear_has_graphic();
  }
  graphic_ = graphic;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.ActionType.graphic)
}

// -------------------------------------------------------------------

// Library

// repeated .chart_proto.ActionType action_type = 1;
inline int Library::action_type_size() const {
  return action_type_.size();
}
inline void Library::clear_action_type() {
  action_type_.Clear();
}
inline ::chart_proto::ActionType* Library::mutable_action_type(int index) {
  // @@protoc_insertion_point(field_mutable:chart_proto.Library.action_type)
  return action_type_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType >*
Library::mutable_action_type() {
  // @@protoc_insertion_point(field_mutable_list:chart_proto.Library.action_type)
  return &action_type_;
}
inline const ::chart_proto::ActionType& Library::action_type(int index) const {
  // @@protoc_insertion_point(field_get:chart_proto.Library.action_type)
  return action_type_.Get(index);
}
inline ::chart_proto::ActionType* Library::add_action_type() {
  // @@protoc_insertion_point(field_add:chart_proto.Library.action_type)
  return action_type_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::ActionType >&
Library::action_type() const {
  // @@protoc_insertion_point(field_list:chart_proto.Library.action_type)
  return action_type_;
}

// -------------------------------------------------------------------

// Chart

// repeated .chart_proto.Row row = 1;
inline int Chart::row_size() const {
  return row_.size();
}
inline void Chart::clear_row() {
  row_.Clear();
}
inline ::chart_proto::Row* Chart::mutable_row(int index) {
  // @@protoc_insertion_point(field_mutable:chart_proto.Chart.row)
  return row_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::chart_proto::Row >*
Chart::mutable_row() {
  // @@protoc_insertion_point(field_mutable_list:chart_proto.Chart.row)
  return &row_;
}
inline const ::chart_proto::Row& Chart::row(int index) const {
  // @@protoc_insertion_point(field_get:chart_proto.Chart.row)
  return row_.Get(index);
}
inline ::chart_proto::Row* Chart::add_row() {
  // @@protoc_insertion_point(field_add:chart_proto.Chart.row)
  return row_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::chart_proto::Row >&
Chart::row() const {
  // @@protoc_insertion_point(field_list:chart_proto.Chart.row)
  return row_;
}

// optional .chart_proto.Library library = 2;
inline bool Chart::has_library() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Chart::set_has_library() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Chart::clear_has_library() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Chart::clear_library() {
  if (library_ != NULL) library_->Clear();
  clear_has_library();
}
inline const ::chart_proto::Library& Chart::_internal_library() const {
  return *library_;
}
inline const ::chart_proto::Library& Chart::library() const {
  const ::chart_proto::Library* p = library_;
  // @@protoc_insertion_point(field_get:chart_proto.Chart.library)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Library*>(
      &::chart_proto::_Library_default_instance_);
}
inline ::chart_proto::Library* Chart::release_library() {
  // @@protoc_insertion_point(field_release:chart_proto.Chart.library)
  clear_has_library();
  ::chart_proto::Library* temp = library_;
  library_ = NULL;
  return temp;
}
inline ::chart_proto::Library* Chart::mutable_library() {
  set_has_library();
  if (library_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Library>(GetArenaNoVirtual());
    library_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.Chart.library)
  return library_;
}
inline void Chart::set_allocated_library(::chart_proto::Library* library) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete library_;
  }
  if (library) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      library = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, library, submessage_arena);
    }
    set_has_library();
  } else {
    clear_has_library();
  }
  library_ = library;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.Chart.library)
}

// -------------------------------------------------------------------

// ChartFile

// optional .chart_proto.Library library = 2;
inline bool ChartFile::has_library() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChartFile::set_has_library() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChartFile::clear_has_library() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChartFile::clear_library() {
  if (library_ != NULL) library_->Clear();
  clear_has_library();
}
inline const ::chart_proto::Library& ChartFile::_internal_library() const {
  return *library_;
}
inline const ::chart_proto::Library& ChartFile::library() const {
  const ::chart_proto::Library* p = library_;
  // @@protoc_insertion_point(field_get:chart_proto.ChartFile.library)
  return p != NULL ? *p : *reinterpret_cast<const ::chart_proto::Library*>(
      &::chart_proto::_Library_default_instance_);
}
inline ::chart_proto::Library* ChartFile::release_library() {
  // @@protoc_insertion_point(field_release:chart_proto.ChartFile.library)
  clear_has_library();
  ::chart_proto::Library* temp = library_;
  library_ = NULL;
  return temp;
}
inline ::chart_proto::Library* ChartFile::mutable_library() {
  set_has_library();
  if (library_ == NULL) {
    auto* p = CreateMaybeMessage<::chart_proto::Library>(GetArenaNoVirtual());
    library_ = p;
  }
  // @@protoc_insertion_point(field_mutable:chart_proto.ChartFile.library)
  return library_;
}
inline void ChartFile::set_allocated_library(::chart_proto::Library* library) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete library_;
  }
  if (library) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      library = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, library, submessage_arena);
    }
    set_has_library();
  } else {
    clear_has_library();
  }
  library_ = library;
  // @@protoc_insertion_point(field_set_allocated:chart_proto.ChartFile.library)
}

// optional string text = 4;
inline bool ChartFile::has_text() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChartFile::set_has_text() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChartFile::clear_has_text() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChartFile::clear_text() {
  text_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_text();
}
inline const ::std::string& ChartFile::text() const {
  // @@protoc_insertion_point(field_get:chart_proto.ChartFile.text)
  return text_.GetNoArena();
}
inline void ChartFile::set_text(const ::std::string& value) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:chart_proto.ChartFile.text)
}
#if LANG_CXX11
inline void ChartFile::set_text(::std::string&& value) {
  set_has_text();
  text_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:chart_proto.ChartFile.text)
}
#endif
inline void ChartFile::set_text(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:chart_proto.ChartFile.text)
}
inline void ChartFile::set_text(const char* value, size_t size) {
  set_has_text();
  text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:chart_proto.ChartFile.text)
}
inline ::std::string* ChartFile::mutable_text() {
  set_has_text();
  // @@protoc_insertion_point(field_mutable:chart_proto.ChartFile.text)
  return text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChartFile::release_text() {
  // @@protoc_insertion_point(field_release:chart_proto.ChartFile.text)
  if (!has_text()) {
    return NULL;
  }
  clear_has_text();
  return text_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChartFile::set_allocated_text(::std::string* text) {
  if (text != NULL) {
    set_has_text();
  } else {
    clear_has_text();
  }
  text_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), text);
  // @@protoc_insertion_point(field_set_allocated:chart_proto.ChartFile.text)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace chart_proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_storage_2fchart_2eproto
